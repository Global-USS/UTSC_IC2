/* #region Header */
//#SYMBOL_NAME ""

//Author: Mat Klucznyk
//Company: Global USS
//Email: mathew.klucznyk@globaluss.com

#USER_SIMPLSHARP_LIBRARY "SimplExtensions"

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#DEFINE_CONSTANT true 1
#DEFINE_CONSTANT false 0
/* #endregion */

/* #region IO Constructor */
//digital_inputs

//analog_inputs
analog_input Minimum, Maximum, AnalogToDev, AnalogFromDev;
//serial_inputs

//buffer_inputs

//digital_outputs

//analog_outputs
analog_output _skip_, _skip_, AnalogToDevScaled, AnalogFromDevScaled;
//serial_outputs

//parameters

/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

//objects
CMutex _mutex;
integer _min, _max, _anaToDev, _anaFromDev, _ready;
/* #endregion */

/* #region Functions */
function ScaleAnalogToDev()
{
	AnalogToDevScaled = AnalogOperations.ScaleWithLimits(_anaToDev, 65535, 0, _max, _min);	
}

function ScaleAnalogFromDev()
{
	AnalogFromDevScaled = AnalogOperations.ScaleWithLimits(_anaFromDev, _max, _min, 65535, 0);
}

/* #endregion */

/* #region Events */
threadsafe change Minimum
{
	integer x;
	
	while(!_ready);
	
	if(Minimum = 0)
	{
		x = 65535;
	}
	
	while(x != Minimum)
	{
		_mutex.WaitForMutex();

		x = Minimum;
		
		if(x < _max)
		{
			_min = x;
		}
		else
		{
			_min = _max - 1;
		}     
		
		ScaleAnalogFromDev();
		ScaleAnalogToDev();
		
		_mutex.ReleaseMutex();
	}
}

threadsafe change Maximum
{
	integer x;
	
	while(!_ready);
	
	if(Maximum = 0)
	{
		x = 65535;
	}
	
	while(x != Maximum)
	{
		_mutex.WaitForMutex();
		
		x = Maximum;
		
		if(x > _min)
		{
			_max = x;
		}
		else
		{
			_max = _min + 1;
		}     
		
		ScaleAnalogFromDev();
		ScaleAnalogToDev();
		
		_mutex.ReleaseMutex();
	}
}


threadsafe change AnalogToDev
{
	integer x;
	
	while(!_ready);
	
	if(AnalogToDev = 0)
	{
		x = 65535;
	}
	
	while(x != AnalogToDev)
	{
		_mutex.WaitForMutex();

		x = AnalogToDev;
		_anaToDev = x;
		
		ScaleAnalogToDev();

		_mutex.ReleaseMutex();
	}
}

threadsafe change AnalogFromDev
{
	integer x;
	
	while(!_ready);
	
	if(AnalogFromDev = 0)
	{
		x = 65535;
	}
	
	while(x != AnalogFromDev)
	{
		_mutex.WaitForMutex();

		x = AnalogFromDev;
		_anaFromDev = x;
		
		ScaleAnalogFromDev();
		
		_mutex.ReleaseMutex();
	}
}
/* #endregion */

/* #region Callbacks */

/* #endregion */

Function Main()
{
	_min = 0;
	_max = 65535;
	
	_ready = true;
}
