/* #region Header */
//#SYMBOL_NAME ""

//Author: Mat Klucznyk
//Company: Global USS
//Email: mathew.klucznyk@globaluss.com

#USER_SIMPLSHARP_LIBRARY "Guss.SimplExtensions"

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#DEFINE_CONSTANT true 1
#DEFINE_CONSTANT false 0
#DEFINE_CONSTANT TotalBits 64

/* #endregion */

/* #region IO Constructor */
//inputs
digital_input _skip_, _skip_, Bits[TotalBits];

//outputs
digital_output AllBitsTrue, MultipleBitsFalse, SingleBitFalse;
analog_output SingleBitFalseIndex;

//parameters

/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

//objects
UInt64BitMask _bitMask;
integer _ready;
/* #endregion */

/* #region Functions */

/* #endregion */

/* #region Events */
change Bits
{
	integer index;
	integer val;
	
	index = GetLastModifiedArrayIndex();
	val = Bits[index];
	
	while(!_ready);
	
	_bitMask.SetBit(index - 1, val);
}
/* #endregion */

/* #region Callbacks */
callback function NewAllTrue()
{
	SingleBitFalse = false;
	if(SingleBitFalseIndex != 0)
	{
		SingleBitFalse = 0;
	}
	MultipleBitsFalse = false;
	AllBitsTrue = true;
}

callback function NewSingleFalse(integer index)
{
	MultipleBitsFalse = false;
	AllBitsTrue = false;
	SingleBitFalseIndex = index + 1;
	SingleBitFalse = true;
}

callback function NewMultipleFalse()
{
	AllBitsTrue = false;
	SingleBitFalse = false;
	if(SingleBitFalseIndex != 0)
	{
		SingleBitFalseIndex = 0;
	}
	MultipleBitsFalse = true;
}
/* #endregion */

Function Main()
{
	integer cnt;
	//WaitForInitializationComplete();
	
	for(cnt = 1 to TotalBits)
	{
		if(!IsSignalDefined(Bits[cnt]))
		break;
		
		_bitMask.SetBit(cnt - 1, 0);
	}
	
	MultipleBitsFalse = true;
	
	RegisterDelegate(_bitMask, OnAllTrue, NewAllTrue);
	RegisterDelegate(_bitMask, OnSingleFalse, NewSingleFalse);
	RegisterDelegate(_bitMask, OnMultipleFalse, NewMultipleFalse);
	
	_ready = 1;
}