/* #region Header */
#CATEGORY "46" "NovaStar"
//#SYMBOL_NAME ""

//Author: Mat Klucznyk
//Company: Global USS
//Email: mathew.klucznyk@globaluss.com

#USER_SIMPLSHARP_LIBRARY "NovaStar"

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#DEFINE_CONSTANT true 1
#DEFINE_CONSTANT false 0
/* #endregion */

/* #region IO Constructor */
//inputs
digital_input Initialize, Connect, Disconnect, GetDeviceStatus, _skip_, _skip_, FadeToBlackOnScreen[6], FadeToBlackOffScreen[6], _skip_,
				FreezeScreen[6], UnFreezeScreen[6,6];
//outputs
digital_output IsConnected, IsCommunicating, DeviceIsReady, DeviceTemperatureIsNoraml, DeviceVoltageIsNormal, _skip_, FadeToBlackIsOnScreen[6],
				FadeToBlackIsOffScreen[6], _skip_, FreezeIsOnScreen[6], FreezeIsOffScreen[6,6];

//parameters
string_parameter _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
_skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_, _skip_,
_skip_, Device_ID[255], Default_IP_Address[255];

/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

//objects
HSeriesCommunicator _dev;
integer _ready;
string _ipa[255];
/* #endregion */

/* #region Functions */

/* #endregion */

/* #region Events */
threadsafe push Initialize
{
	while(!_ready);
	
   _dev.Configure(Device_ID, _ipa);
}

push Connect
{
   _dev.Connect();
}

push Disconnect
{
   _dev.Disconnect();
}

push GetDeviceStatus
{
   _dev.GetDeviceDetails();
}

push FadeToBlackOnScreen
{
   integer index;

   index = GetLastModifiedArrayIndex() - 1;

   _dev.SingleScreenFadeToBlackOn(index);
   
}

push FadeToBlackOffScreen
{
   integer index;

   index = GetLastModifiedArrayIndex() - 1;

   _dev.SingleScreenFadeToBlackOff(index);
   
}

push FreezeScreen
{
   integer index;

   index = GetLastModifiedArrayIndex() - 1;
   
   _dev.SingleScreenFreezeOn(index);
}

push UnfreezeScreen
{
   integer index;

   index = GetLastModifiedArrayIndex() - 1;
   
   _dev.SingleScreenFreezeOff(index);
}
/* #endregion */

/* #region Callbacks */
eventhandler NewConnectedChanged(HSeriesCommunicator sender,NovaStarBoolEventArgs args)
{
	IsConnected = args.Payload;
}

eventhandler NewCommunicatingChanged(HSeriesCommunicator sender,NovaStarBoolEventArgs args)
{
	IsCommunicating = args.Payload;
}

eventhandler NewDeviceDetailsUpdated(HSeriesCommunicator sender,HSeriesDeviceDetailsUpdatedEventArgs args)
{
	HSeriesDeviceDetailsUpdatedPayload x;
	
	x = args.Payload;
	
	DeviceIsReady = x.DeviceIsReady;
	DeviceTemperatureIsNoraml = x.TemperatureIsNormal;
	DeviceVoltageIsNormal = x.VoltageIsNormal;
}

eventhandler NewScreenFadeToBlackStatusChanged(HSeriesCommunicator sender,NovaStarIndexedBoolEventArgs args)
{
	integer index;
	
	index = args.Payload.Index + 1;
	
	if(args.Payload.Value)
   {
      FadeToBlackIsOffScreen[index] = false;
      FadeToBlackIsOnScreen[index] = true;
   }
   else
   {
      FadeToBlackIsOnScreen[index] = false;
      FadeToBlackIsOffScreen[index] = true;
   }
}

eventhandler NewScreenFreezeStatusChanged(HSeriesCommunicator sender,NovaStarIndexedBoolEventArgs args)
{
	integer index;
	
	index = args.Payload.Index + 1;
	
	if(args.Payload.Value)
	{
		FreezeIsOffScreen[index] = false;
		FreezeIsOnScreen[index] = true;
	}
	else
	{
		FreezeIsOnScreen[index] = false;
		FreezeIsOffScreen[index] = true;
	}
}
/* #endregion */

Function Main()
{
	WaitForInitializationComplete();
	RegisterEvent(_dev, ConnectedChanged, NewConnectedChanged);
	RegisterEvent(_dev, CommunicatingChanged, NewCommunicatingChanged);
	RegisterEvent(_dev, DeviceDetailsUpdated, NewDeviceDetailsUpdated);
	RegisterEvent(_dev, ScreenFadeToBlackStatusChanged, NewScreenFadeToBlackStatusChanged);
	RegisterEvent(_dev, ScreenFreezeStatusChanged, NewScreenFreezeStatusChanged);
	
   _ipa = Default_IP_Address;
   _ready = true;
}
