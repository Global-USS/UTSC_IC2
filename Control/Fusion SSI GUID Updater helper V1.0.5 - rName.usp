#Default_Volatile
#Enable_Stack_Checking
#Print_To_Trace
#Enable_Trace
#Category "46" "Fusion"


/*** Help ***/

#Help_Begin
The Fusion GUID Updater allows cookie cutter code when using a Fusion Room symbol by prefixing the GUID's shown in SIMPL Windows with the TSID of the processor. In the case of a 3
series the program slot number will also be included in the prefix to ensure everything is unique. The GUID Updater requires some form of storage in order to run, either a NVRAM Disk, 
Compact Flash or Removable Media and the appropriate location needs to be selected using the FileStorageLocation$ Parameter.

*** Revision History ***
Version 1.0.0 - Initial Release

Version 1.0.2 - 

Removed Update_GUID from function main
Renamed Queue from Update_GUIDs_Busy_fb to Update_GUID_Finished

Version 1.0.3 - Latest changes from the Fusion GUID Updater 3.06 have been merged into the Fusion SSI GUID Updater.

Version 1.0.4 - Added support for VC4

Version 1.0.5 - Added support for new serial number format

#Help_End


/*** Constants ***/

#define_constant cnFalse						0
#define_constant cnTrue							1

//Timing Constants
#define_constant cnStartupDelay					2000
#define_constant cnLongStartupDelay				12000
#define_constant cnMessageDelay					500

//Fusion Symbol Constants
#define_constant cnMaxFusionSymbols				60
#define_constant cnMaxFusionSymbolGUIDS			252
#define_constant cnMaxRoomNameLength			50

//Buffer/Size Constants 
#define_constant cnRVIFileChunkSize				5000
#define_constant cnRVIDataStorageSize			5500
#define_constant cnConsoleBufferSize			1000
#define_constant cnConsoleTempBufferSize		500
#define_constant cnMaxLineLength				200
#define_constant cnMaxRVINameLength				200

//GUID Information Constants
#define_constant cnStandardGUIDLength			36
#define_constant cnNewGUIDLength				50
#define_constant cnGUIDPrefixLength				15
#define_constant cnGUIDPrefixInputLength		8
#define_constant cnTSIDPrefixMinLength			8
#define_constant cnTSIDMaxRetries				5
#define_constant cnGUIDMasterOverride			1000
#define_constant cnGUIDConsoleOverride			1001
#define_constant csTSIDErrorValue				"XXXXXXXX"

//Console Constants
#define_constant csConsoleVersionCMD		    "ver\n"
#define_constant csConsoleValidResponse		    "#"
#define_constant csConsoleValidResponse2		"%"
#define_constant csConsoleDataEnd		    	"]"
#define_constant csConsolePromptEnd		    	">"
#define_constant csConsolePromptProcessor1		"PRO2>"
#define_constant csConsolePromptProcessor2		"AV2>"
#define_constant csConsolePromptProcessor3		"QM-RMC>"
#define_constant csConsolePromptProcessor4		"CP2E>"
#define_constant csConsolePromptProcessor5		"CP2>"
#define_constant csConsolePromptProcessor6		"MP2E>"
#define_constant csConsolePromptProcessor7		"MP2>"
#define_constant csConsolePromptProcessor8		"PAC2>"
#define_constant csConsolePromptProcessor9		"DIN-AP2>"
#define_constant csConsolePromptProcessor10		"DMPS-100-C>"
#define_constant csConsolePromptProcessor11		"DMPS-200-C>"
#define_constant csConsolePromptProcessor12		"DMPS-300-C>"
#define_constant csConsolePromptProcessor13		"DMPS-300-C-AEC>"

#define_constant csConsoleAddress				"127.0.0.1"
#define_constant csConsolePort					41795
#define_constant cnConsoleConnectDelay			200
#define_constant csConsoleCommandDelay			1000

//File Constants
#define_constant cs2SeriesDebugRVIFile			"\\SIMPL\\Fusion GUID Updater Simple Test Pro2 10-21-2013 rev3.rvi"
#define_constant cs2SeriesDebugTempRVIFile		"\\NVRAM\\Fusion GUID Updater Simple Test Pro2 10-21-2013 rev3.rvi"
#define_constant cs3SeriesDebugRVIFile			"\\SIMPL\\App01\\ADG-PV-Room_230-140310.rvi"
#define_constant cs3SeriesDebugTempRVIFile		"\\NVRAM\\ADG-PV-Room_230-140310.rvi"
#define_constant csSIMPLPath					"\\SIMPL\\"
#define_constant csRVIFileExtension				".rvi"
#define_constant csRVIFileSearchExtension		"*.rvi"
#define_constant csRVIFileSearchError			"FileFoundError"
#define_constant cnFileIODelay					100                                                       
#define_constant backupExt						"_app"
#define_constant tmpExt							"_tmp"

//XML Data Constants
#define_constant csFileStartofData 				"<RoomViewInfo>"
#define_constant csFileEndofData 				"</RoomViewInfo>"
#define_constant csSymbolStartofData 			"<SymbolInfo>"
#define_constant csSymbolEndofData 				"</SymbolInfo>"
#define_constant csRoomNameStartofData		    "<RoomName>"
#define_constant csRoomNameEndofData			"</RoomName>"
#define_constant csNodeNameStartofData		    "<NodeName>"
#define_constant csNodeNameEndofData			"</NodeName>"
#define_constant csRoomNodeIDStartofData		"<InstanceID>"
#define_constant csRoomNodeIDEndofData			"</InstanceID>"
#define_constant csIPIDStartofData 				"<IPID>"
#define_constant csIPIDEndofData 				"</IPID>"
#define_constant csSlotNumStartofData 			"<SlotNum>"
#define_constant csSlotNumEndofData 			"</SlotNum>"
#define_constant csParamStartofData				"<Param>"
#define_constant csParamEndofData				"</Param>"
#define_constant csParamSeachName				"<Name>AssetName</Name>"
#define_constant csParamSeachType				"<Name>InstanceID</Name>"
#define_constant csParamGUIDStartofData			"<Value>"
#define_constant csParamGUIDEndofData			"</Value>"

//File Constants 
#define_constant cnFullDeleteMode				1
#define_constant cnTempRVIDeleteMode			2

#CRESTRON_SIMPLSHARP_LIBRARY "SSFileOps"
#CRESTRON_SIMPLSHARP_LIBRARY "FusionSystemInfo"
/*** Inputs/Outputs ***/

Digital_Input 	_skip_, _skip_, _skip_, _skip_, Update_GUIDs_b;                                       

String_Input	_skip_, Master_Override_GUID_Prefix$[cnGUIDPrefixInputLength], Override_Symbol_Room_Name$[cnMaxRoomNameLength];

Buffer_Input	 _skip_, _skip_, _skip_, Console_rx$[cnConsoleBufferSize];

Digital_Output	_skip_, _skip_, _skip_, _skip_, Update_GUID_Finished;

String_Output	_skip_, Update_GUID_Status_txt$, Master_GUID_Prefix_txt$, RVI_File_Name_txt$, RVI_File_Full_Path_txt$, _skip_, Console_tx$, _skip_, Console_Status_txt$;
String_Output _SKIP_, RoomName$, RoomGUID$, Symbol_Slot_GUIDs_tx$/*[cnMaxFusionSymbols, cnMaxFusionSymbols]*/;
//String_Output _SKIP_, Debug$;

/*** Parameter ***/

integer_parameter	ProcessorMode, PrefixGUIDs, ThreeSeriesAppendSlotNumber;
string_parameter	FileStorageLocation$[10];

/*
#Begin_Parameter_Properties DebugMode
    propValidUnits = unitDecimal;
    propDefaultUnit = unitDecimal;
    propDefaultValue = 0d;  
    propList = { 0d , "Off" }, { 1d , "On All" }, { 2d , "On No File" };
#End_Parameter_Properties
*/

#Begin_Parameter_Properties ProcessorMode
    propValidUnits = unitDecimal;
    propDefaultUnit = unitDecimal;
    propDefaultValue = 0d;  
    //propList = { 0d , "Standard Processors" }, { 1d , "MPS/DMPS Processors" };
#End_Parameter_Properties

#Begin_Parameter_Properties PrefixGUIDs
    propValidUnits = unitDecimal;
    propDefaultUnit = unitDecimal;
    propDefaultValue = 1d;  
    //propList = {0d, "No"}, {1d, "Yes"};
#End_Parameter_Properties

#Begin_Parameter_Properties ThreeSeriesAppendSlotNumber
    propValidUnits = unitDecimal;
    propDefaultUnit = unitDecimal;
    propDefaultValue = 1d;  
    //propList = {0d, "No"}, {1d, "Yes"};
#End_Parameter_Properties

#Begin_Parameter_Properties FileStorageLocation$
    propValidUnits = unitString;
    propDefaultUnit = unitString;
    propDefaultValue = "\\RM\\";
	//propList = {"\\NVRAM\\", "NVRAM Disk"}, {"\\CF0\\", "Compact Flash"}, {"\\RM\\", "Removable Media (USB)"}, {"\\RM2\\", "Removable Media 2 (USB)"}, {"\\MMC\\", "Multimedia Card"};
#End_Parameter_Properties


/*** TCP Sockets ***/

tcp_client 		tcpConsole[cnConsoleBufferSize];


/*** Structures ***/

SimplSharpFileOps	FileOps;
FusionSystemInfo fusionSystemInfo;

/*** Variables ***/

integer			g_nDebug, g_nDebugRviFile, g_nConsoleStep, g_nFusionDataStarted, g_nFusionSymbolDataStarted, g_nFusionSymbolCount, g_nSlotNumber,
				g_nInstanceIDFound, g_nTSIDRetryCount, g_nTSIDUpdateBusy, g_nInitialRun, g_nRVIFileChanged, g_nRoomNameOverrideAllowed, g_nMasterGUIDOverride,
				g_nGUIDOverride[cnMaxFusionSymbols], g_nRoomNameUpdated[cnMaxFusionSymbols], g_nGUIDCount[cnMaxFusionSymbols];

signed_integer	g_snConsoleConnectionOk, g_snConsoleConnectionStatus;
integer DBug;
integer BadStoragePath;
integer Initialized;
integer UpdateGUIDReceived;

string 			g_sMasterGUIDPrefix$[cnGUIDPrefixLength], g_sGUIDPrefix$[cnMaxFusionSymbols][cnGUIDPrefixLength], g_sGUIDMasterOverridePrefix$[cnGUIDPrefixLength],
				g_sRVITemp$[cnRVIDataStorageSize], g_sRVINewFileTemp$[cnRVIDataStorageSize], g_sRVIFullFilePath$[cnMaxRVINameLength], g_sRVINewFullFilePath$[cnMaxRVINameLength],
				g_sRVIFileName$[cnMaxRVINameLength], g_sRVIFileLocation$[cnMaxRVINameLength], g_sOverrideRoomName$[cnMaxFusionSymbols][cnMaxRoomNameLength];

string	FileStorageLocation[255];

/*** Functions ***/

String_Function UpdateGUIDPrefix(string sCurrentGUIDPrefix$, integer nGUIDSymbolNumber)
{
 	integer nProgSlot2;
	string	sNewGUIDPrefix$[cnGUIDPrefixLength];

    if(g_nDebug) print("***** Start UpdateGUIDPrefix *****\n");
	if(g_nDebug) print("sCurrentGUIDPrefix$ = %s\n", sCurrentGUIDPrefix$);
	if(g_nDebug) print("nGUIDSymbolNumber = %d\n", nGUIDSymbolNumber);

	if(nGUIDSymbolNumber = cnGUIDMasterOverride) //Leave the GUID that was passed into the function in sCurrentGUIDPrefix$
	{
   		if(g_nDebug) print("Inside if(nGUIDSymbolNumber = cnGUIDMasterOverride)\n");	  	
	}
	else if(nGUIDSymbolNumber = cnGUIDConsoleOverride) //Leave the GUID that was passed into the function in sCurrentGUIDPrefix$
	{
     	if(g_nDebug) print("Inside else if(nGUIDSymbolNumber = cnGUIDConsoleOverride)\n");
	}
	else if(g_nGUIDOverride[nGUIDSymbolNumber]) 
	{
     	if(g_nDebug) print("g_nGUIDOverride[nGUIDSymbolNumber] = %d\n", g_nGUIDOverride[nGUIDSymbolNumber]);
		if(g_nDebug) print("Inside if(g_nGUIDOverride[nGUIDSymbolNumber]), g_sGUIDPrefix$ = %s\n", g_sGUIDPrefix$[nGUIDSymbolNumber]);
		makestring(sCurrentGUIDPrefix$, "%s", g_sGUIDPrefix$[nGUIDSymbolNumber]);
	}

	switch(GetSeries())
	{
	   	case(2):
		{
	   		if(g_nDebug) print("2 Series Processor\n");
			makestring(sNewGUIDPrefix$, "%s", sCurrentGUIDPrefix$);
		}
		default:
		{
	       	nProgSlot2 = GetProgramNumber();
			
			if(g_nDebug) print("3 Series Processor\n");
			if(g_nDebug) print("nProgSlot2 = %u\n", nProgSlot2);
				
			if(ThreeSeriesAppendSlotNumber)
			{
				if(g_nDebug) print("Inside if(ThreeSeriesAppendSlotNumber)\n");
				if(nProgSlot2 = 1)
				{
	             	makestring(sNewGUIDPrefix$, "%s-01", sCurrentGUIDPrefix$);		 	
				}
				else if(nProgSlot2 = 2)
				{
	                makestring(sNewGUIDPrefix$, "%s-02", sCurrentGUIDPrefix$);		 	
				}
				else if(nProgSlot2 = 3)
				{
	                makestring(sNewGUIDPrefix$, "%s-03", sCurrentGUIDPrefix$);		 	
				}
				else if(nProgSlot2 = 4)
				{
	                makestring(sNewGUIDPrefix$, "%s-04", sCurrentGUIDPrefix$);		 	
				}
				else if(nProgSlot2 = 5)
				{
	                makestring(sNewGUIDPrefix$, "%s-05", sCurrentGUIDPrefix$);		 	
				}
				else if(nProgSlot2 = 6)
				{
	                makestring(sNewGUIDPrefix$, "%s-06", sCurrentGUIDPrefix$);		 	
				}
				else if(nProgSlot2 = 7)
				{
	                makestring(sNewGUIDPrefix$, "%s-07", sCurrentGUIDPrefix$);		 	
				}
				else if(nProgSlot2 = 8)
				{
	                makestring(sNewGUIDPrefix$, "%s-08", sCurrentGUIDPrefix$);		 	
				}
				else if(nProgSlot2 = 9)
				{
	                makestring(sNewGUIDPrefix$, "%s-09", sCurrentGUIDPrefix$);		 	
				}
				else if(nProgSlot2 = 10)
				{
	                makestring(sNewGUIDPrefix$, "%s-10", sCurrentGUIDPrefix$);		 	
				}
			}
			else
			{
            	if(g_nDebug) print("Inside ELSE FOR if(ThreeSeriesAppendSlotNumber)\n");
				makestring(sNewGUIDPrefix$, "%s", sCurrentGUIDPrefix$); 	
			}
		}
	}
    
	if(g_nDebug) print("sNewGUIDPrefix$ = %s\n", sNewGUIDPrefix$);
	if(g_nDebug) print("***** End UpdateGUIDPrefix *****\n");

	return(sNewGUIDPrefix$);
}

function AcquireAppPath()
{
	string tempString[1000], tempString3[1000], tempString4[1000], tempString5[1000];

	makestring(Update_GUID_Status_txt$, "Determining Processor Type...");
	if (getseries() = 4)
	{
		makestring(tempString, "%s%s", FileOps.GetApplicationPath(), "/");
	}
	else
	{
		makestring(tempString, "%s%s", FileOps.GetApplicationPath(), "\\");		
	}
	makestring(g_sRVIFileLocation$, "%s", tempString);
	if(DBug) print("app path: %s\n", g_sRVIFileLocation$);
}

function SeekRviFile()
{
	string rviFileNameFound[cnMaxRVINameLength];
	string tempString[1000], tempString2[1000];

	if(DBug) print("***** Start Find RVI File *****\n");

	makestring(Update_GUID_Status_txt$, "Finding RVI File...");
	
	if(DBug) print("path: %s \n", g_sRVIFileLocation$);
	if(DBug) print("ext: %s \n", csRVIFileSearchExtension);

	tempString = FileOps.GetFirstFileNameByExt(g_sRVIFileLocation$, csRVIFileSearchExtension);

	makestring(rviFileNameFound, "%s", tempString);

	if(DBug) print("rviFileNameFound = %s\n", rviFileNameFound);
	if(len(rviFileNameFound) > 0)
	{
		makestring(g_sRVIFileName$, "%s%s", rviFileNameFound, csRVIFileExtension);
		makestring(RVI_File_Name_txt$, "%s", g_sRVIFileName$);
		makestring(RVI_File_Full_Path_txt$, "%s%s", g_sRVIFileLocation$, g_sRVIFileName$);
	}
	else
	{
		makestring(g_sRVIFileName$, "%s", csRVIFileSearchError);
		makestring(RVI_File_Name_txt$, "%s", csRVIFileSearchError);
		makestring(RVI_File_Full_Path_txt$, "%s", csRVIFileSearchError);  	
	}
	
	if(DBug) print("g_sRVIFileName$ = %s\n", g_sRVIFileName$);
	if(DBug) print("g_sRVIFileLocation$ = %s\n", g_sRVIFileLocation$);
	if(DBug) print("***** End Find RVI File *****\n");
}

Function WriteTempFile()
{
	string sFileWritePath$[cnMaxRVINameLength];
	integer	nFileLen;
	signed_integer snFileHandle, snNumWrite, snStartFileIOError, snEndFileIOError, snFileCloseError;

	if(g_nDebug) print("***** Start WriteTempFile *****\n");

	makestring(Update_GUID_Status_txt$, "Writing Data To File...");
    
    makestring(sFileWritePath$, "%s%s%s%d", FileStorageLocation, g_sRVIFileName$, tmpExt, GetProgramNumber());
	//makestring(sFileWritePath$, "%s%s", FileStorageLocation, g_sRVIFileName$);
	// what is this?:
	//makestring(g_sRVINewFullFilePath$, "%s%s", FileStorageLocation, g_sRVIFileName$);

	if(g_nDebug) print("sFileWritePath$ = %s\n", sFileWritePath$);

	snStartFileIOError = startfileoperations();
	while(snStartFileIOError != 0)
	{
     	if(g_nDebug) Print ("Start File Operations Error Retrying\n");
		delay(cnFileIODelay);
		snStartFileIOError = startfileoperations();
	}
	
	if(g_nDebugRviFile)
		snFileHandle = FileOpenShared(cs3SeriesDebugTempRVIFile, _O_WRONLY | _O_CREAT | _O_APPEND | _O_TEXT);	
    else
		snFileHandle = FileOpenShared(sFileWritePath$, _O_WRONLY | _O_CREAT | _O_APPEND | _O_TEXT);	
    
   	if(g_nDebug)
	{
		print("FileOpen Complete\n");
		print("snFileHandle = %d\n", snFileHandle);
	}

	if(snFileHandle >= 0) 
	{
		if(g_nDebug) print("***** Inside if(snFileHandle >= 0) *****\n");
		nFileLen = len(g_sRVINewFileTemp$);
		snNumWrite = FileWrite(snFileHandle, g_sRVINewFileTemp$, nFileLen);
		snFileCloseError = FileClose(snFileHandle);
		while(snFileCloseError != 0)
		{
			if(g_nDebug) Print ("File Close Error Retrying\n");
			delay(cnFileIODelay);
			snFileCloseError = FileClose(snFileHandle);
		}

		if(g_nDebug) print("nFileLen = %d\n", nFileLen);
		if(g_nDebug) print("snNumWrite = %d\n", snNumWrite);

		clearbuffer(g_sRVINewFileTemp$); //Clear Temp Data
		
		if(g_nDebug && (snNumWrite < 0)) Print("Error Writing to File\n"); 
    }
	else // temp file write fail, with no prior prevention of simpl rvi file deletion.
	{
		BadStoragePath = 1;
		GenerateUserError("Fusion GUID Updater Invalid storage location, check module storage parameter. %s at %s\n", date(1), time());
	}
	snEndFileIOError = endfileoperations();
	while(snEndFileIOError != 0)
	{
     	if(g_nDebug) Print ("End File Operations Error Retrying\n");
		delay(cnFileIODelay);
		snEndFileIOError = endfileoperations();
	}

	if(g_nDebug) print("***** End WriteTempFile *****\n"); 	
}

String_Function AddNewFileData(String sCurrentData$)
{
   	if(g_sRVINewFileTemp$ <> "")
	{
   		makestring(g_sRVINewFileTemp$, "%s%s", g_sRVINewFileTemp$, sCurrentData$);  		
	}
	else
	{
		makestring(g_sRVINewFileTemp$, "%s", sCurrentData$);
	}
}

String_Function GetRoomName(Integer nCurrentSymbolCount, String sCurrentData$)
{
 	integer	nStartPosition, nEndPosition, nCount;
	string 	sRoomNameReturn$[cnMaxRoomNameLength];

	if(nCurrentSymbolCount <= cnMaxFusionSymbols)
	{
		if(g_sOverrideRoomName$[nCurrentSymbolCount] <> "") //Room name has been overridden
		{
		   	makestring(sRoomNameReturn$, "%s", g_sOverrideRoomName$[nCurrentSymbolCount]);
			g_nRVIFileChanged = 1;
			if(g_nDebug) print("Line 451 g_nRVIFileChanged = %d\n", g_nRVIFileChanged);
		}
		else //Parse Data
		{
		   	nStartPosition = find(csRoomNameStartofData, sCurrentData$) + len(csRoomNameStartofData);
			nEndPosition = find(csRoomNameEndofData, sCurrentData$, nStartPosition);
			nCount = nEndPosition - nStartPosition;
			makestring(sRoomNameReturn$, "%s", mid(sCurrentData$, nStartPosition, nCount));  	
		}
	}
	else //Parse Data
	{
	   	nStartPosition = find(csRoomNameStartofData, sCurrentData$) + len(csRoomNameStartofData);
		nEndPosition = find(csRoomNameEndofData, sCurrentData$, nStartPosition);
		nCount = nEndPosition - nStartPosition;
		makestring(sRoomNameReturn$, "%s", mid(sCurrentData$, nStartPosition, nCount));  	
	}

	return(sRoomNameReturn$);
}

String_Function GetNodeName(Integer nCurrentSymbolCount, String sCurrentData$)
{
 	integer	nStartPosition, nEndPosition, nCount;
	string 	sNodeNameReturn$[cnMaxRoomNameLength];

	if(nCurrentSymbolCount <= cnMaxFusionSymbols)
	{
		if(g_sOverrideRoomName$[nCurrentSymbolCount] <> "") //Room name has been overridden
		{
	     	makestring(sNodeNameReturn$, "%s", g_sOverrideRoomName$[nCurrentSymbolCount]);
			g_nRVIFileChanged = 1;
			if(g_nDebug) print("Line 473 g_nRVIFileChanged = %d\n", g_nRVIFileChanged);
		}
		else //Parse Data
		{
	   		nStartPosition = find(csNodeNameStartofData, sCurrentData$) + len(csNodeNameStartofData);
			nEndPosition = find(csNodeNameEndofData, sCurrentData$, nStartPosition);
			nCount = nEndPosition - nStartPosition;
			makestring(sNodeNameReturn$, "%s", mid(sCurrentData$, nStartPosition, nCount));  	
		}
	}
	else //Parse Data
	{
		nStartPosition = find(csNodeNameStartofData, sCurrentData$) + len(csNodeNameStartofData);
		nEndPosition = find(csNodeNameEndofData, sCurrentData$, nStartPosition);
		nCount = nEndPosition - nStartPosition;
		makestring(sNodeNameReturn$, "%s", mid(sCurrentData$, nStartPosition, nCount));  	
	}

	return(sNodeNameReturn$);
}

Function ExtractRoomGUID(String RoomGUID)
{
	Integer Pointer1, Pointer2;
	
	Pointer1 = Find("<InstanceID>", RoomGUID) + 12;
	Pointer2 = Find("</InstanceID>", RoomGUID, Pointer1);
	
	RoomGUID$ = Mid(RoomGUID, Pointer1, Pointer2 - Pointer1);	
}

String_Function ParseRVIFileData(String sRVITempFileData$)
{
 	integer nStartPosition, nEndPosition, nCount;

	string 	sTempData$[cnMaxLineLength], sRVITempNewFileData$[cnRVIDataStorageSize], sTempRoomName$[cnMaxRoomNameLength], sTempRoomNameData$[200],
			sTempRoomGUID$[100], sTempInstanceGUID$[100];

    nStartPosition = 0;
	nEndPosition = 0;
	nCount = 0;
    
	makestring(Update_GUID_Status_txt$, "Processing Data...");

	if(g_nDebug) print("***** Start ParseRVIFile *****\n");

	if(g_sRVITemp$ <> "")
	{
     	if(g_nDebug) print("g_sRVITemp$ <> \x22\x22 = True\n");
		makestring(g_sRVITemp$, "%s%s", g_sRVITemp$, sRVITempFileData$);
	}
	else
	{
     	if(g_nDebug) print("g_sRVITemp$ <> \x22\x22 = False\n");
		makestring(g_sRVITemp$, "%s", sRVITempFileData$);
	}
	if(g_nDebug) print("len(g_sRVITemp$) = %u\nlen(sRVITempFileData$) = %u\n", len(g_sRVITemp$), len(sRVITempFileData$));
	
	while(find("\n", g_sRVITemp$))
	{
     	sTempData$ = remove("\n", g_sRVITemp$);
		if(find(csSymbolStartofData, sTempData$) || g_nFusionSymbolDataStarted)
		{
			g_nFusionSymbolDataStarted = 1;
        	if(g_nDebug) print("sTempData$ = %s\n", sTempData$);
			while(!find(csSymbolEndofData, sTempData$) && find("\n", sTempData$))
			{
				if(find(csRoomNameStartofData, sTempData$)) //Room Name - This we just need to extract the data
				{
					if(g_nDebug) print("**Room Name Segment***\n sTempData$ = %s\n", sTempData$);
					makestring(sTempRoomName$, "%s", GetRoomName(g_nFusionSymbolCount, sTempData$));
					//makestring(Symbol_Slot_GUIDs_tx$, "Roomname: %s\n\n", sTempRoomName$);
					
					If(g_nFusionSymbolCount = 1) RoomName$ = sTempRoomName$;
					
					if(g_nFusionSymbolCount <= cnMaxFusionSymbols)
					{
						//makestring(Symbol_Room_Name_txt$[g_nFusionSymbolCount], "%s", sTempRoomName$);
					}
					makestring(sTempRoomNameData$, "          %s%s%s\n", csRoomNameStartofData, sTempRoomName$, csRoomNameEndofData); 
					AddNewFileData(sTempRoomNameData$); 	
				}
				else if(find(csNodeNameStartofData, sTempData$)) //Node Name - This we just need to extract the data
				{
					if(g_nDebug) print("**Node Name Segment***\n sTempData$ = %s\n", sTempData$);
					makestring(sTempRoomName$, "%s", GetNodeName(g_nFusionSymbolCount, sTempData$));
					if(g_nFusionSymbolCount <= cnMaxFusionSymbols)
					{ 
						//makestring(Symbol_Room_Name_txt$[g_nFusionSymbolCount], "%s", sTempRoomName$);
					}
					makestring(sTempRoomNameData$, "          %s%s%s\n", csNodeNameStartofData, sTempRoomName$, csNodeNameEndofData); 
					AddNewFileData(sTempRoomNameData$); 	
				}
				else if(find(csRoomNodeIDStartofData, sTempData$)) //Node GUID - This needs to be modified
				{
                	nStartPosition = find(csRoomNodeIDStartofData, sTempData$) + len(csRoomNodeIDStartofData);
					nEndPosition = find(csRoomNodeIDEndofData, sTempData$, nStartPosition);
					nCount = nEndPosition - nStartPosition;
					if(g_nFusionSymbolCount > cnMaxFusionSymbols) //We have more then our max symbols, edit it but don't try to output it
					{
						if(find(g_sMasterGUIDPrefix$, sTempData$) || PrefixGUIDs = cnFalse) //We have already modified this GUID or don't need too
						{
							AddNewFileData(sTempData$);
						}
						else //We need to modify the GUID
						{
							g_nRVIFileChanged = 1;
							if(g_nDebug) print("Line 715 g_nRVIFileChanged = %d\n", g_nRVIFileChanged);
							makestring(sTempRoomGUID$, "          %s%s-%s%s\n", csRoomNodeIDStartofData, g_sMasterGUIDPrefix$, mid(sTempData$, nStartPosition, nCount), csRoomNodeIDEndofData);
							if(g_nDebug) print("sTempRoomGUID$ = %s\n", sTempRoomGUID$);
							AddNewFileData(sTempRoomGUID$);
							ExtractRoomGUID(sTempRoomGUID$);
							//Debug$ = sTempRoomGUID$;
						}
					}
					else if(find(g_sGUIDPrefix$[g_nFusionSymbolCount], sTempData$) || PrefixGUIDs = cnFalse) //We have already modified this GUID or don't need too
					{
                     	//makestring(Symbol_GUID_txt$[g_nFusionSymbolCount], "%s", mid(sTempData$, nStartPosition, nCount));
						AddNewFileData(sTempData$);
					}
					else //We need to modify the GUID
					{ 
						g_nRVIFileChanged = 1;
						if(g_nDebug) print("Line 551 g_nRVIFileChanged = %d\n", g_nRVIFileChanged);
						makestring(sTempRoomGUID$, "          %s%s-%s%s\n", csRoomNodeIDStartofData, g_sGUIDPrefix$[g_nFusionSymbolCount], mid(sTempData$, nStartPosition, nCount), csRoomNodeIDEndofData);
						if(g_nDebug) print("sTempRoomGUID$ = %s\n", sTempRoomGUID$);
						//makestring(Symbol_GUID_txt$[g_nFusionSymbolCount], "%s-%s", g_sGUIDPrefix$[g_nFusionSymbolCount], mid(sTempData$, nStartPosition, nCount));
						AddNewFileData(sTempRoomGUID$);
						//Debug$ = sTempRoomGUID$;
						ExtractRoomGUID(sTempRoomGUID$);
					}
				}
				else if(find(csIPIDStartofData, sTempData$)) //IP ID - This we just need to extract the data
				{
                	nStartPosition = find(csIPIDStartofData, sTempData$) + len(csIPIDStartofData);
					nEndPosition = find(csIPIDEndofData, sTempData$, nStartPosition);
					nCount = nEndPosition - nStartPosition;
					if(g_nDebug) print("**IP ID Segment***\n sTempData$ = %s\n nStartPosition = %u\n nEndPosition = %u\n nCount = %u\n", sTempData$, nStartPosition, nEndPosition, nCount);
					if(g_nFusionSymbolCount <= cnMaxFusionSymbols)
					{
						//makestring(Symbol_IPID_txt$[g_nFusionSymbolCount], "%s", mid(sTempData$, nStartPosition, nCount));
					}
					AddNewFileData(sTempData$); 	
				}
				else if(find(csSlotNumStartofData, sTempData$)) //Slot Number - This we just need to extract the data
				{
                	nStartPosition = find(csSlotNumStartofData, sTempData$) + len(csSlotNumStartofData);
					nEndPosition = find(csSlotNumEndofData, sTempData$, nStartPosition);
					nCount = nEndPosition - nStartPosition;
					g_nSlotNumber = atoi(mid(sTempData$, nStartPosition, nCount));
					if(g_nDebug) Print ("**Slot Number Segment***\n sTempData$ = %s\n nStartPosition = %u\n nEndPosition = %u\n nCount = %u\n g_nSlotNumber = %u\n", sTempData$, nStartPosition, nEndPosition, nCount, g_nSlotNumber);
					AddNewFileData(sTempData$); 	
				}
				/*else if (find(csParamSeachName, sTempData$)) //The data for the Asset Name is coming up
				{
					g_AssetNameFound = 1;			
				}
				//this is what was modified
				else if(g_AssetNameFound && find(csParamGUIDStartofData, sTempData$))
				{
					nStartPosition = find(csParamGUIDStartofData, sTempData$) + len(csParamGUIDStartofData);
					nEndPosition = find(csParamGUIDEndofData, sTempData$, nStartPosition);
					nCount = nEndPosition - nStartPosition;
                    makestring(Symbol_Slot_GUIDs_tx$, "%s:\n", mid(sTempData$, nStartPosition, nCount));
					g_AssetNameFound = 0;
				}*/
				else if(find(csParamSeachType, sTempData$)) //The data for the GUID is coming up
				{
                	g_nInstanceIDFound = 1;
					if(g_nDebug) print("***csParamSeachType Found***\n");
					AddNewFileData(sTempData$); 	
				}
				else if(g_nInstanceIDFound && find(csParamGUIDStartofData, sTempData$)) //This is the GUID that we need to modify
				{
                 	if(g_nDebug) print("***else if(g_nInstanceIDFound && find(csParamGUIDStartofData, sTempData$)) Found***\n");
					nStartPosition = find(csParamGUIDStartofData, sTempData$) + len(csParamGUIDStartofData);
					nEndPosition = find(csParamGUIDEndofData, sTempData$, nStartPosition);
					nCount = nEndPosition - nStartPosition;

					if(g_nFusionSymbolCount <= cnMaxFusionSymbols)
					{
						g_nGUIDCount[g_nFusionSymbolCount] = g_nGUIDCount[g_nFusionSymbolCount] + 1;
					}

					if(g_nDebug) print("g_nFusionSymbolCount = %u\n", g_nFusionSymbolCount);
					if(g_nDebug) print("nSlotNumber = %u\n", g_nSlotNumber);
					
					if(g_nFusionSymbolCount > cnMaxFusionSymbols) //We have more then our max symbols, edit it but don't try to output it
					{
						if(find(g_sMasterGUIDPrefix$, sTempData$) || PrefixGUIDs = cnFalse) //We have already modified this GUID or don't need too
						{
							AddNewFileData(sTempData$);
						}
						else //We need to modify the GUID
						{
							g_nRVIFileChanged = 1;
							if(g_nDebug) print("Line 787 g_nRVIFileChanged = %d\n", g_nRVIFileChanged);
							makestring(sTempInstanceGUID$, "                    %s%s-%s%s\n", csParamGUIDStartofData, g_sMasterGUIDPrefix$, mid(sTempData$, nStartPosition, nCount), csParamGUIDEndofData);
							if(g_nDebug) print("sTempInstanceGUID$ = %s\n", sTempInstanceGUID$);
							AddNewFileData(sTempRoomGUID$);
						}
						g_nInstanceIDFound = 0;
					}
					else if(find(g_sGUIDPrefix$[g_nFusionSymbolCount], sTempData$) || PrefixGUIDs = cnFalse) //We have already modified this GUID or don't need too
					{
                      	if(g_nDebug) print("***if(find(g_sGUIDPrefix$[g_nFusionSymbolCount], sTempData$)) Found***\n");
						
						If(g_nFusionSymbolCount = 1)
						{
							makestring(Symbol_Slot_GUIDs_tx$/*[g_nFusionSymbolCount]*/, "%u,%s\n", g_nSlotNumber, mid(sTempData$, nStartPosition, nCount));
						}
						AddNewFileData(sTempData$);
					}
					else //We need to modify the GUID
					{
						g_nRVIFileChanged = 1;
						if(g_nDebug) print("Line 803 g_nRVIFileChanged = %d\n", g_nRVIFileChanged);
						if(g_nDebug) print("***if(find(g_sGUIDPrefix$[g_nFusionSymbolCount], sTempData$)) ELSE Found***\n");
						makestring(sTempInstanceGUID$, "                    %s%s-%s%s\n", csParamGUIDStartofData, g_sGUIDPrefix$[g_nFusionSymbolCount], mid(sTempData$, nStartPosition, nCount), csParamGUIDEndofData);
						if(g_nDebug) print("sTempInstanceGUID$ = %s\n", sTempInstanceGUID$);
	                    
	                    If(g_nFusionSymbolCount = 1)
						{
	                    	makestring(Symbol_Slot_GUIDs_tx$/*[g_nFusionSymbolCount]*/, "%u,%s-%s\n", g_nSlotNumber, g_sGUIDPrefix$[g_nFusionSymbolCount], mid(sTempData$, nStartPosition, nCount));
						}
					}
					g_nInstanceIDFound = 0;
					AddNewFileData(sTempInstanceGUID$);
				}
				else //We don't care about this data pass it untouched
				{
                 	AddNewFileData(sTempData$);	
				}

				sTempData$ = remove("\n", g_sRVITemp$);
				if(g_nDebug) print("sTempData$ = %s\n", sTempData$);   	
			}
			if(find(csSymbolEndofData, sTempData$))
			{
             	AddNewFileData(sTempData$);
				g_nFusionSymbolDataStarted = 0;
				g_nFusionSymbolCount = g_nFusionSymbolCount + 1;
			}
		}
		else
		{
       		AddNewFileData(sTempData$);  	
		}		
	}

	if(PrefixGUIDs = cnTrue)
	{
		if(g_nDebug) print("Inside if(PrefixGUIDs = cnTrue)\n");
		WriteTempFile();
	}
	else
	{
      	if(g_nDebug) print("Inside ELSE if(PrefixGUIDs = cnTrue)\n");
		clearbuffer(g_sRVINewFileTemp$); //Clear Temp Data
	}
	if(g_nDebug) print("***** End ParseRVIFile *****\n");
}

function ProcessRVIFile(string sRVIFile$)
{
	signed_integer 	snFileHandle, snStartFileIOError, snReadError, snFileCloseError, snEndFileIOError;		//File Handle
	string	sRVITempReadData$[cnRVIDataStorageSize];
	
	if(g_nDebug) print("***** Start ProcessRVIFile *****\n");    
    makestring(Update_GUID_Status_txt$, "Processing RVI File...");

    snStartFileIOError = startfileoperations();
	while(snStartFileIOError != 0)
	{
     	if(g_nDebug) Print ("Start File Operations Error Retrying\n");
		delay(cnFileIODelay);
		snStartFileIOError = startfileoperations();
	}
	
	if(sRVIFile$ <> "") //Check to ensure we have a RVI File to Read 
	{
        if(g_nDebug) Print("sRVIFile$ = %s\n", sRVIFile$);
		snFileHandle = FileOpenShared(sRVIFile$, _O_RDONLY | _O_TEXT);

        if(g_nDebug)
		{
			Print ("FileOpen Complete\n");
			Print ("snFileHandle = %d\n", snFileHandle);
		}

		if (snFileHandle >= 0) 
		{
			while(FileRead(snFileHandle, sRVITempReadData$, cnRVIFileChunkSize) > 0)
			{
				if(g_nDebug) Print("File Read Ok\n");
				if(g_nDebug) Print("len(sRVITempReadData$) = %u\n", len(sRVITempReadData$));
				ParseRVIFileData(sRVITempReadData$);
			}
			snFileCloseError = FileClose(snFileHandle);
			while(snFileCloseError != 0)
			{
                if(g_nDebug) Print ("File Close Error Retrying\n");
				delay(cnFileIODelay);
				snFileCloseError = FileClose(snFileHandle);
			}
        }
        else 
        {
         	if(g_nDebug) Print ("snFileHandle Error\n");
        }
	}
	
	snEndFileIOError = endfileoperations();
	while(snEndFileIOError != 0)
	{
     	if(g_nDebug) Print ("End File Operations Error Retrying\n");
		delay(cnFileIODelay);
		snEndFileIOError = endfileoperations();
	}

	if(g_nDebug) print("***** End ProcessRVIFile *****\n");
}


integer_function RviMatch()
{
	string tmpFilePathName[cnMaxRVINameLength];
	string rviFilePathName[cnMaxRVINameLength];
	file_info tmpfileInfo;
	file_info rvifileInfo;
	signed_integer tmpFileFound;
	signed_integer rviFileFound;
	signed_integer tmpFileHandle;
	signed_integer rviFileHandle;
	string tmpbuffer[1000];
	string rvibuffer[1000];
	integer tmpRead;
	integer rviRead;
    signed_integer tmpFileCloseError;
    signed_integer rviFileCloseError;
    signed_integer fileOpErr;
    
    integer Matching;
    integer Match;
    
	signed_integer snStartFileIOError, snEndFileIOError;
	
    string fileName[cnMaxRVINameLength];
    string appPath[cnMaxRVINameLength];
                 
	if(DBug) print("*** modified rvi match check ***\n");   	

    appPath = g_sRVIFileLocation$;
	makestring(fileName, "%s%s%d", g_sRVIFileName$, tmpExt, GetProgramNumber());
    //fileName = g_sRVIFileName$;
    if(DBug) print ("file name: %s file path: %s\n", fileName, appPath);
    
	snStartFileIOError = startfileoperations();
	while(snStartFileIOError != 0)
	{
     	if(DBug) Print ("Start File Operations Error Retrying\n");
		delay(cnFileIODelay);
		snStartFileIOError = startfileoperations();
	}
    
	makestring(tmpFilePathName, "%s%s", FileStorageLocation, fileName);
	if(DBug) print ("temp file pathNameExt: %s \n", tmpFilePathName);
	makestring(rviFilePathName, "%s%s", appPath, g_sRVIFileName$);
	//makestring(rviFilePathName, "%s%s", appPath, fileName);
	if(DBug) print ("rvi file pathNameExt: %s \n", rviFilePathName);

	tmpFileFound = FindFirstShared(tmpFilePathName, tmpfileInfo);
	fileOpErr = findClose();
	while(fileOpErr != 0)
	{
		if(DBug) Print ("Find Close Error Retrying\n");
		delay(cnFileIODelay);
		fileOpErr = findClose();
	}
	
	rviFileFound = FindFirstShared(rviFilePathName, rvifileInfo);
	fileOpErr = findClose();
	while(fileOpErr != 0)
	{
		if(DBug) Print ("Find Close Error Retrying\n");
		delay(cnFileIODelay);
		fileOpErr = findClose();
	}

	if(DBug) print("tmpFileFound = %d\n", tmpFileFound);
	if(tmpFileFound = 0)
	{
		if (rviFileFound = 0)
		{ 
			tmpFileHandle = FileOpenShared(tmpFilePathName, _O_RDONLY | _O_TEXT);
	        rviFileHandle = FileOpenShared(rviFilePathName, _O_RDONLY | _O_TEXT);
			
			if(DBug) print("tmpFileOpened = %d\n", tmpFileHandle);
			if(DBug) print("rviFileOpened = %d\n", rviFileHandle);
			
			if (tmpFileHandle >= 0 && rviFileHandle >= 0) 
	        {
	        	if (tmpfileInfo.lsize > 0 && rvifileInfo.lsize > 0)
	        	{
			        Matching = 1;
			        Match = 0;
		        	while(Matching)
		        	{
			        	tmpRead = FileRead(tmpFileHandle, tmpbuffer, 1000);
			        	rviRead = FileRead(rviFileHandle, rvibuffer, 1000);
			        	if(DBug) print("tmp read: %d \n rvi read: %d \n", tmpRead, rviRead);
			        	//if(DBug) print ("tmp: %s \n", tmpbuffer);
			        	//if(DBug) print ("rvi: %s \n", rvibuffer);		        	
			        	
			        		// 			read err			size mismatch			data mismatch
			        	if (tmpRead < 0 || rviRead < 0 || tmpRead != rviRead || tmpbuffer <> rvibuffer)
			        	{
			        		if(DBug) print("not matched \n");
			        		Matching = 0; // redundant
			        		break;
			        	}
			        	
		        		if (FileEof(tmpFileHandle) && FileEof(rviFileHandle))
		        		{
		        			if(DBug) print("matched \n");
		        			Match = 1;
			        		Matching = 0; // redundant
			        		break;
		        		}
		        	}
				}
	        }
	        else if(DBug) print("one or both file wont open for compare \n");
	        	
        	tmpFileCloseError = FileClose(tmpFileHandle);
	        while(tmpFileCloseError != 0)
			{
                if(g_nDebug) Print ("tmp Close Error Retrying\n");
				delay(cnFileIODelay);
				tmpFileCloseError = FileClose(tmpFileHandle);
			}
			
			rviFileCloseError = FileClose(rviFileHandle);
			while(rviFileCloseError != 0)
			{
                if(g_nDebug) Print ("tmp Close Error Retrying\n");
				delay(cnFileIODelay);
				tmpFileCloseError = FileClose(rviFileHandle);
			}
		}
		else if(DBug) print("app rvi file missing sometime between startup read and update compare: %s\n", rviFilePathName);
	}
	else if(DBug) print("no tmp file do whatever this program does: %s\n", tmpFilePathName);
	
	snEndFileIOError = endfileoperations();
	while(snEndFileIOError != 0)
	{
     	if(g_nDebug) Print ("End File Operations Error Retrying\n");
		delay(cnFileIODelay);
		snEndFileIOError = endfileoperations();
	}
	
	return (Match);
}

function CopyAndDeleteFiles(integer unused)
{
	string sourcePathNameExt[cnMaxRVINameLength];
	string destPathNameExt[cnMaxRVINameLength];
	string tempString3[1000], tempString4[1000], tempString5[1000];
     
    if(!BadStoragePath)
	{
	    makestring(sourcePathNameExt, "%s%s%s%d", FileStorageLocation, g_sRVIFileName$, tmpExt, GetProgramNumber());
		//makestring(sourcePathNameExt, "%s%s", FileStorageLocation, g_sRVIFileName$);
		if(DBug) print("sourcePathNameExt: %s\n", sourcePathNameExt);
		makestring(destPathNameExt, "%s%s%s%d", g_sRVIFileLocation$, g_sRVIFileName$, backupExt, GetProgramNumber());
		if(DBug) print("destPathNameExt: %s\n", destPathNameExt);

		if (FileOps.FileExists(sourcePathNameExt) != 0)
		{			
			if (!RviMatch())
			{
				makestring(Update_GUID_Status_txt$, "Replacing RVI File with update...");
				if(DBug) print("Replacing rvi File with update...\n");
				
				if (FileOps.CopyFile(sourcePathNameExt, destPathNameExt , 1) = 0)
				{
					if (DBug) print("rvi copied to app dir\n");
				}
				else
				{
					if (DBug) print("didnt copy rvi to app dir\n");
				}
				
				if (FileOps.RenameFile(destPathNameExt, g_sRVIFileName$, 1) = 0)
				{
					if (DBug) print("rvi renamed in app dir\n");
				}
				else
				{
					if (DBug) print("didnt rename rvi in app dir\n");
				}
			}
			else if (DBug) print("files match no update\n");
				
			makestring(Update_GUID_Status_txt$, "Creating backup RVI File...");
			
			makestring(destPathNameExt, "%s%s%d", g_sRVIFileName$, backupExt, GetProgramNumber());
			if (FileOps.RenameFile(sourcePathNameExt, destPathNameExt, 1) = 0)
			{
				if (DBug) print("converted working to backup rvi\n");
			}
			else
			{
				if (DBug) print("cannot convert working to backup rvi\n");
			}
		}
		else
			GenerateUserError("Fusion GUID Updater: working rvi file disappeared between the time it was created and it was to be copied to the app folder. File can be restored on restart if backup exsists. %s at %s\n", date(1), time());
	}
	else
		GenerateUserError("Fusion GUID Updater: Cannot continue processing with an invalid storage location. %s at %s\n", date(1), time());
}

Function Clear_Outputs()
{
	integer nLoopi;

	makestring(Update_GUID_Status_txt$, "Clearing Current Data...");
    
	if(!g_nMasterGUIDOverride)
	{
		makestring(Master_GUID_Prefix_txt$, "");
	}
	makestring(RVI_File_Name_txt$, "");
	makestring(RVI_File_Full_Path_txt$, "");
	
	for(nLoopi = 1 to cnMaxFusionSymbols)
	{
   		//makestring(Symbol_Room_Name_txt$[nLoopi], "");  	
		//makestring(Symbol_GUID_txt$[nLoopi], "");  	
		//makestring(Symbol_IPID_txt$[nLoopi], "");
		//makestring(Symbol_GUID_Count_txt$[nLoopi], "");
		//Symbol_GUID_Count_fb[nLoopi] = 0;
		g_nGUIDCount[nLoopi] = 0;
	} 	
}

Function UpdateGUIDCounts()
{
 	integer nLoopj;

	makestring(Update_GUID_Status_txt$, "Updating GUID Counts...");
	
	for(nLoopj = 1 to cnMaxFusionSymbols)
	{
		//makestring(Symbol_GUID_Count_txt$[nLoopj], "%u", g_nGUIDCount[nLoopj]);
		//Symbol_GUID_Count_fb[nLoopj] = g_nGUIDCount[nLoopj];
	}
}

Function Update_GUIDs()
{
 	string sRVIFileName$[cnMaxRVINameLength];
	integer nLoop;

	//Update_GUID_Finished = cnTrue;
	//g_nInitialRun = cnFalse;
	if(g_nDebug) print("Inside if(!Update_GUID_Finished || g_nInitialRun)\n");
	makestring(Update_GUID_Status_txt$, "GUID Update Started...");
	Clear_Outputs();
	g_nConsoleStep = 1;
	g_nTSIDUpdateBusy = 1;
	if (fusionSystemInfo.DevicePlatform() = 1)
	{
		g_sGUIDMasterOverridePrefix$ = UpdateGUIDPrefix(fusionSystemInfo.GetFormattedMACAddr(), cnGUIDConsoleOverride);
		makestring(Master_GUID_Prefix_txt$, "%s", g_sGUIDMasterOverridePrefix$);
		makestring(g_sMasterGUIDPrefix$, "%s", g_sGUIDMasterOverridePrefix$);
		if(g_nDebug) print("g_sGUIDMasterOverridePrefix$ = %s\n", g_sGUIDMasterOverridePrefix$);
		for(nLoop = 1 to cnMaxFusionSymbols)
		{
               	if(!g_nGUIDOverride[nLoop]) //This prefix hasn't been overriden set it to the tsid prefix
			{
				makestring(g_sGUIDPrefix$[nLoop], "%s", g_sGUIDMasterOverridePrefix$);
			}
		}
		g_nConsoleStep = 0;
		g_nTSIDRetryCount = 0;
		g_nTSIDUpdateBusy = 0;
	}
	else
	{
		makestring(console_tx$, "%s", csConsoleVersionCMD);
	}
	while(g_nTSIDUpdateBusy)
	{
        	if(g_nDebug) print("Inside while(g_nTSIDUpdateBusy)\n");
		processlogic();
		delay(200);
	}
	g_nFusionDataStarted = 0;
	g_nFusionSymbolDataStarted = 0;
	g_nFusionSymbolCount = 1;
	clearbuffer(g_sRVITemp$);
	if(g_nDebug) print("g_sRVITemp$ = %s\n", g_sRVITemp$);
	if(g_nDebug) print("len(g_sRVITemp$) = %d\n", len(g_sRVITemp$));
	
	makestring(sRVIFileName$, "%s", g_sRVIFileName$);

	if(find(csTSIDErrorValue, g_sGUIDPrefix$[g_nFusionSymbolCount])) // TSID Error
	{
        	makestring(Update_GUID_Status_txt$, "TSID Error...");
		if(g_nDebug) print("TSID Error\n");
		delay(cnMessageDelay); 	
	}
	else
	{
		if(sRVIFileName$ != csRVIFileSearchError)
		{
            makestring(Update_GUID_Status_txt$, "RVI File Found Processing File...");
			makestring(g_sRVIFullFilePath$, "%s%s", g_sRVIFileLocation$, sRVIFileName$);

			if(g_nDebug) print("Inside if(sRVIFileName$ != csRVIFileSearchError)\ng_sRVIFullFilePath$ = %s\n", g_sRVIFullFilePath$);
			if(g_nDebug = 1)
			{
				switch(getseries())
				{
					case(2):
					{
                     	ProcessRVIFile(cs2SeriesDebugRVIFile);
					}
					default:
					{
                     	ProcessRVIFile(cs3SeriesDebugRVIFile);
					}
				}
			}
			else
			{
	         	ProcessRVIFile(g_sRVIFullFilePath$);
			}

			UpdateGUIDCounts();
			if(g_nRVIFileChanged && PrefixGUIDs = cnTrue) //We modified the file
			{
				if(g_nDebug) print("Inside if(g_nRVIFileChanged && PrefixGUIDs = cnTrue)\n");
				CopyAndDeleteFiles(cnFullDeleteMode);
				g_nRVIFileChanged = 0;
			}
			else if(PrefixGUIDs = cnTrue) //We only need to delete the temp file
			{
				if(g_nDebug) print("Inside ELSE if(PrefixGUIDs = cnTrue)\n");
				CopyAndDeleteFiles(cnTempRVIDeleteMode);
				g_nRVIFileChanged = 0;		
			}
			else
			{
                	if(g_nDebug) print("Inside ELSE if(g_nRVIFileChanged && PrefixGUIDs = cnTrue)\n");
				g_nRVIFileChanged = 0;
			}
		}
		else
		{
         	makestring(Update_GUID_Status_txt$, "RVI File Error...");
			delay(cnMessageDelay);
			if(g_nDebug) print("FindRVIFile Error\n");
		}
	}
	makestring(Update_GUID_Status_txt$, "GUID Update Complete!");
	//GenerateUserNotice("Fusion GUID Updater Completed on %s at %s\n", date(1), time());
	pulse(50, Update_GUID_Finished) ;
	delay(cnMessageDelay);
	makestring(Update_GUID_Status_txt$, "");
}

/*Function Check_Roomnames()
{
	integer nIndex;

	if(g_nDebug) print("***** Function Check_Roomnames *****\n");
	
	for(nIndex = 1 to cnMaxFusionSymbols)
	{
     	if(g_nRoomNameUpdated[nIndex])
		{
         	makestring(g_sOverrideRoomName$[nIndex], "%s", Override_Symbol_Room_Name$[nIndex]);
			g_nRoomNameUpdated[nIndex] = cnFalse;
		}
	}
}*/
function DeleteLingeringTempFile()
{



	string tmpPathNameExt[cnMaxRVINameLength];
    integer programNumber;
    
    programNumber = GetProgramNumber();
    makestring(tmpPathNameExt, "%s%s%d", g_sRVIFileName$, tmpExt, GetProgramNumber());
	//tmpPathNameExt = g_sRVIFileName$;
	
	makestring(tmpPathNameExt, "%s%s", FileStorageLocation, tmpPathNameExt);
    if(DBug) print("file to purge: %s\n", tmpPathNameExt);
	
    if (FileOps.FileExists(tmpPathNameExt) = 1)
    {
	    GenerateUserError ("Fusion GUID Updater Helper: Found invalid working rvi file, marked for removal: %s at %s\n", date(1), time());
    	if (FileOps.DeleteFile(tmpPathNameExt) = 0)
			GenerateUserError ("Fusion GUID Updater Helper: invalid working rvi file purged: %s at %s\n", date(1), time());
		else
			GenerateUserError ("Fusion GUID Updater Helper: invalid working rvi could not be purged, check for rvi file corruption: %s at %s\n", date(1), time());
    }
    else if(DBug) print("no file to purge\n");
}


Function RestoreMissingRvi()
{


	//string appPath[cnMaxRVINameLength];
	string fileName[cnMaxRVINameLength];
	string backupFilePathName[cnMaxRVINameLength];
	string appFilePathName[cnMaxRVINameLength];
	string tempString[cnMaxRVINameLength];

	fileName = g_sRVIFileName$;
	
	if(DBug) Print ("app path: %s, fileName: %s\n", g_sRVIFileLocation$, fileName);

	if (fileName = csRVIFileSearchError)
    {


		GenerateUserError ("Fusion GUID Updater Helper, missing application .rvi file, attempting to restore: %s at %s\n", date(1), time());

		makestring(backupFilePathName, "%s%s%d", csRVIFileSearchExtension, backupExt, GetProgramNumber());
		if(DBug) print("back up search terms: %s\n", backupFilePathName);
		
		fileName = FileOps.GetFirstFileNameByExt(FileStorageLocation, backupFilePathName);

		if(DBug) print("back up found: %s\n", fileName);
		if (Len(fileName) > 0)
		{
			makestring(backupFilePathName, "%s%s.rvi%s%d", FileStorageLocation, fileName, backupExt, GetProgramNumber());
			if(DBug) print("back source: %s\n", backupFilePathName);
			makestring(appFilePathName, "%s%s.rvi", g_sRVIFileLocation$, fileName);
			if(DBug) print("app destion: %s\n", appFilePathName);
			if (FileOps.CopyFile(backupFilePathName, appFilePathName, 0) = 0)
			{
				SeekRviFile();
				if (g_sRVIFileName$ != csRVIFileSearchError)
					GenerateUserError ("Fusion GUID Updater Helper: missing application .rvi file restored and re-registered: %s at %s\n", date(1), time());
				else
					GenerateUserError ("Fusion GUID Updater Helper: missing application .rvi file restored but then couldn't be re-registered: %s at %s\n", date(1), time());
			}
			else
				GenerateUserError ("Fusion GUID Updater Helper: missing application .rvi file restore failed: %s at %s\n", date(1), time());
		}
		else
			GenerateUserError ("Fusion GUID Updater Helper: restore fail, there is no backup to restore from: %s at %s\n", date(1), time());
	}


	else if(DBug) print("rvi not missing\n");
}


/*** Event Handlers ***/
Threadsafe
Push Update_GUIDs_b
{
	if (Initialized)
	{
		Update_GUIDs();
	}
	else
	{
		UpdateGUIDReceived = on;
	}
}

/*Push DebugMode_On_Held
{
 	g_nDebug = 1;
	if(g_nDebug) print("***** Push DebugMode_On_Held *****\n");
	DebugMode_On_fb = g_nDebug;
}

Release DebugMode_On_Held
{
 	if(g_nDebug) print("***** Release DebugMode_On_Held *****\n");
	if(!DebugMode)
	{
		if(g_nDebug) print("Inside if(!DebugMode)\n");
		g_nDebug = 0;
	}
	DebugMode_On_fb = g_nDebug;
}*/

Change Master_Override_GUID_Prefix$
{
 	integer nLoop;
	string sTempNewGUID$[cnNewGUIDLength];

	if(g_nDebug) print("***** Change Master_Override_GUID_Prefix$ *****\n");
	if(Master_Override_GUID_Prefix$ <> "")
	{
		if(g_nDebug) print("***** Inside if(Master_Override_GUID_Prefix$ <> \x22\x22) *****\n");
		g_nMasterGUIDOverride = cnTrue;
		setarray(g_nGUIDOverride, cnTrue);
		makestring(g_sGUIDMasterOverridePrefix$, "%s", Master_Override_GUID_Prefix$);
		makestring(sTempNewGUID$, "%s", UpdateGUIDPrefix(g_sGUIDMasterOverridePrefix$, cnGUIDMasterOverride));
		for(nLoop = 1 to cnMaxFusionSymbols)
		{
         	makestring(g_sGUIDPrefix$[nLoop], "%s", sTempNewGUID$);
		}
		//setarray(g_sGUIDPrefix$, sTempNewGUID$); //Commented out, this was causing SIMPL Windows compile to fail
		makestring(g_sMasterGUIDPrefix$, "%s", sTempNewGUID$);
		makestring(Master_GUID_Prefix_txt$, "%s", sTempNewGUID$);
		if(g_nDebug) print("sTempNewGUID$ = %s\n", sTempNewGUID$);
	}
	else
	{
     	if(g_nDebug) print("***** Inside ELSE for if(Master_Override_GUID_Prefix$ <> \x22\x22) *****\n");
		g_nMasterGUIDOverride = cnFalse;
		setarray(g_nGUIDOverride, cnFalse);
	}
	//if(g_nDebug) print("g_sGUIDPrefix$[1] = %s\ng_nMasterGUIDOverride = %d\n", g_sGUIDPrefix$[1], g_nMasterGUIDOverride); 
}

/*Change Override_Symbol_GUID_Prefix$
{
 	integer nLastChanged;

	if(g_nDebug) print("***** Change Override_Symbol_GUID_Prefix$ *****\n");

	nLastChanged = getlastmodifiedarrayindex();
	if(g_nDebug) print("nLastChanged = %u\n", nLastChanged);

	if(Override_Symbol_GUID_Prefix$[nLastChanged] <> "" && !g_nMasterGUIDOverride) //We have a override guid and the master override hasn't happened
	{
		if(g_nDebug) print("***** Inside if(Override_Symbol_GUID_Prefix$[nLastChanged] <> \x22\x22 && !g_nMasterGUIDOverride) *****\n");
		g_nGUIDOverride[nLastChanged] = cnTrue;
		makestring(g_sGUIDPrefix$[nLastChanged], "%s", Override_Symbol_GUID_Prefix$[nLastChanged]);
		makestring(g_sGUIDPrefix$[nLastChanged], "%s", UpdateGUIDPrefix(g_sGUIDPrefix$[nLastChanged], nLastChanged));
		if(g_nDebug) print("g_sGUIDPrefix$[nLastChanged] = %s\n", g_sGUIDPrefix$[nLastChanged]);
	}
	if(g_nDebug) print("g_sGUIDPrefix$[nLastChanged] = %s\ng_nGUIDOverride[nLastChanged] = %d\n", g_sGUIDPrefix$[nLastChanged], g_nGUIDOverride[nLastChanged]);
}*/

threadsafe Change Console_rx$
{
	integer	nTSIDStartPOS, nTSIDEndPOS, nTSIDCount, nLoop, nSnType;
	string	sConsoleSearchTemp$[100], sTempTSID$[20];

	if(g_nDebug) print("***** Start Console_rx$ *****\n");

	if(g_nConsoleStep > 0 && find(csConsolePromptEnd, Console_rx$) && g_nTSIDRetryCount <= cnTSIDMaxRetries)
	{
		if(find(csConsoleValidResponse, Console_rx$))
		{
         	nSnType = 1;
		}
		else if(find(csConsoleValidResponse2, Console_rx$))
		{
         	nSnType = 2;
		}
    	if(nSnType > 0 && find(csConsoleDataEnd, Console_rx$) && (g_nConsoleStep = 1) && (!g_nMasterGUIDOverride))	//We got the TSID and no master override
		{
        	if(g_nDebug) print("***** Inside Console If for TSID *****\n");
			if(nSnType = 1)
			{
              nTSIDStartPOS = find(csConsoleValidResponse, Console_rx$) + 1;

			}
			else if(nsnType = 2)
			{
               nTSIDStartPOS = find(csConsoleValidResponse2, Console_rx$) + 1;
			}
			nTSIDEndPOS = find(csConsoleDataEnd, Console_rx$);
			nTSIDCount = nTSIDEndPOS - nTSIDStartPOS;
			makestring(sTempTSID$, "%s", lower(mid(Console_rx$, nTSIDStartPOS, nTSIDCount)));
			if(g_nDebug)
			{
				print("nTSIDStartPOS = %d\n", nTSIDStartPOS);
				print("nTSIDEndPOS = %d\n", nTSIDEndPOS);
				print("nTSIDCount = %d\n", nTSIDCount);
				print("sTempTSID$ = %s\n", sTempTSID$);
			}
			if(len(sTempTSID$) < cnTSIDPrefixMinLength)
			{
             	clearbuffer(Console_rx$);
				g_nTSIDRetryCount = g_nTSIDRetryCount + 1;
				if(g_nDebug) print("TSID Error, Retrying TSID, Retry Count: %d\n", g_nTSIDRetryCount);
				makestring(Update_GUID_Status_txt$, "Invalid TSID Received, Retrying... Retry Count: %d", g_nTSIDRetryCount);
				g_nConsoleStep = 1;
				makestring(console_tx$, "%s", csConsoleVersionCMD);
			}
			else
			{
				//makestring(g_sGUIDPrefix$, "%s", UpdateGUIDPrefix(sTempTSID$, cnGUIDConsoleOverride));
				g_sGUIDMasterOverridePrefix$ = UpdateGUIDPrefix(sTempTSID$, cnGUIDConsoleOverride);
				makestring(Master_GUID_Prefix_txt$, "%s", g_sGUIDMasterOverridePrefix$);
				makestring(g_sMasterGUIDPrefix$, "%s", g_sGUIDMasterOverridePrefix$);
				if(g_nDebug) print("g_sGUIDMasterOverridePrefix$ = %s\n", g_sGUIDMasterOverridePrefix$);
				for(nLoop = 1 to cnMaxFusionSymbols)
				{
                 	if(!g_nGUIDOverride[nLoop]) //This prefix hasn't been overriden set it to the tsid prefix
					{
						makestring(g_sGUIDPrefix$[nLoop], "%s", g_sGUIDMasterOverridePrefix$);
					}
				}
				clearbuffer(Console_rx$);
				g_nConsoleStep = 0;
				g_nTSIDRetryCount = 0;
				g_nTSIDUpdateBusy = 0;
			}
		}
		else if(g_nMasterGUIDOverride)
		{
        	if(g_nDebug) print("Inside else if(g_nGUIDOverride)\n");
			clearbuffer(Console_rx$);
			g_nConsoleStep = 0;
			g_nTSIDRetryCount = 0;
			g_nTSIDUpdateBusy = 0;
		}
	}
	else if(g_nTSIDRetryCount > cnTSIDMaxRetries)
	{
    	if(g_nDebug) print("TSID Error, Max Retries Reached, Stopping Process");
		makestring(Update_GUID_Status_txt$, "TSID Error, Max Retries Reached, Stopping Process");
		makestring(g_sGUIDMasterOverridePrefix$, "%s", UpdateGUIDPrefix(csTSIDErrorValue, cnGUIDConsoleOverride));
		makestring(Master_GUID_Prefix_txt$, "%s", g_sGUIDMasterOverridePrefix$);
		for(nLoop = 1 to cnMaxFusionSymbols)
		{
           	if(!g_nGUIDOverride[nLoop]) //This prefix hasn't been overriden set it to the tsid prefix
			{
				makestring(g_sGUIDPrefix$[nLoop], "%s", g_sGUIDMasterOverridePrefix$);
			}
		}
		g_nTSIDUpdateBusy = 0;
	}
	else if(find(csConsolePromptEnd, Console_rx$))
	{
     	clearbuffer(Console_rx$);
	}

	if(g_nDebug) print("***** End Console_rx$ *****\n");
}

Change Override_Symbol_Room_Name$
{
 	integer nLastRoomNameChanged;

	if(g_nDebug) print("***** Change Override_Symbol_Room_Name$ *****\n");
	
	nLastRoomNameChanged = 1;

	g_nRoomNameUpdated[nLastRoomNameChanged] = cnTrue;
	
	if(g_nDebug) print("nLastRoomNameChanged = %u\n", nLastRoomNameChanged);
    if(g_nDebug) print("Override_Symbol_Room_Name$ = %s\n", Override_Symbol_Room_Name$);

	
	if(Override_Symbol_Room_Name$ <> "" && g_nRoomNameOverrideAllowed)
	{
     	makestring(g_sOverrideRoomName$[nLastRoomNameChanged], "%s", Override_Symbol_Room_Name$);
		g_nRoomNameUpdated[nLastRoomNameChanged] = cnFalse;
		if(g_nDebug) print("g_sOverrideRoomName$[nLastRoomNameChanged] = %s\n", g_sOverrideRoomName$[nLastRoomNameChanged]);
	}
}

/*** Main ***/

Function Main()
{
	integer nCount;
	g_nDebug = off;
	g_nDebugRviFile = off;
	DBug = off;
	BadStoragePath = off;
	Initialized = off;
	UpdateGUIDReceived = off;
	
	WaitForInitializationComplete();
    
	g_nDebug = cnFalse;
	if(g_nDebug) print("***** Start Function Main *****\n");

	g_nInitialRun = cnTrue;
	g_nConsoleStep = cnFalse;
	g_nMasterGUIDOverride = cnFalse;
	setarray(g_nGUIDOverride, cnFalse);
	g_nInstanceIDFound = cnFalse;
	g_nTSIDRetryCount = cnFalse;
	g_nTSIDUpdateBusy = cnFalse;
	g_nRVIFileChanged = cnFalse;
	g_nRoomNameOverrideAllowed = cnFalse;
	
	for(nCount = 1 to cnMaxFusionSymbols)
	{
     	clearbuffer(g_sOverrideRoomName$[nCount]);
	}
	g_nRoomNameOverrideAllowed = cnTrue;
	//Check_Roomnames();

	if(g_nDebug) print("***** Function Main Complete Variable Init *****\n");

	//Update_GUID_Finished = cnTrue;

	if(ProcessorMode)
	{
     	delay(cnLongStartupDelay);
	}
	else
	{
    	delay(cnStartupDelay); 	
	}

	AcquireAppPath();
	SeekRviFile();

	if (getSeries() = 4)
	{
		FileStorageLocation = "/User/Fusion/";
	}
	else
	{
		FileStorageLocation = "\\User\\Fusion\\";
	}

	if (FileOps.CheckOrCreateDirectory(FileStorageLocation))
	{
		DeleteLingeringTempFile();
		RestoreMissingRvi();
    }
    else
    	GenerateUserError ("Fusion GUID Updater Helper: could not find/create working directory: <%s>. %s at %s\n", FileStorageLocation, date(1), time());
	clearbuffer(g_sRVINewFileTemp$);
    
	if (fusionSystemInfo.DevicePlatform() = 0)
	{
	    MakeString(1, "BROAD OFF\r");			//Turn off console broadcasting as this might interfere with the GUID update process when connected to console
    }
	//Update_GUIDs();
	Initialized = on;
	if (UpdateGUIDReceived)
	{
		Update_GUIDs();
	}

	if(g_nDebug) print("***** End Function Main *****\n");
}




