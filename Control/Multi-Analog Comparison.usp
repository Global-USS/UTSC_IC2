/* #region Header */
//#SYMBOL_NAME ""

//Author: Mat Klucznyk
//Company: Global USS
//Email: mathew.klucznyk@globaluss.com

//#USER_SIMPLSHARP_LIBRARY ""

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#DEFINE_CONSTANT true 1
#DEFINE_CONSTANT false 0
#DEFINE_CONSTANT maxValues 999
/* #endregion */

/* #region IO Constructor */
//digital_inputs

//analog_inputs
analog_input value[maxValues,3];
//serial_inputs

//buffer_inputs

//digital_outputs
digital_output Equals, DoesNotEqual;

//analog_outputs

//serial_outputs

//parameters

/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

//objects
CMutex _compareMutex;
CMutex _valuesMutex;
integer _values[maxValues];
integer _ready;
/* #endregion */

/* #region Functions */
function SetValue(integer index, integer value)
{
	_valuesMutex.WaitForMutex();
	_values[index] = value;
	_valuesMutex.ReleaseMutex();
}

integer_function GetValue(integer index)
{
	integer x;
	
	_valuesMutex.WaitForMutex();
	x = _values[index];
	_valuesMutex.ReleaseMutex();
	
	return(x);
}

function Compare()
{
	integer cnt;
	integer eq;
	integer performed;
	
	_compareMutex.WaitForMutex();
	eq = false;
	performed = false;
	
	for(cnt = 1 to (maxValues - 1))
	{
	    if(!IsSignalDefined(value[cnt]))
	    {
	    	cnt = maxValues - 1;
	    }		
		else if(IsSignalDefined(value[cnt]) && IsSignalDefined(value[cnt + 1]))
		{
			performed = true;
			if(GetValue(cnt) != GetValue(cnt + 1))
			{
				break;
			}
			
		}
		
		if(cnt = (maxValues - 1) && performed)
		{
			eq = true;
		}
	}
	
	if(!eq)
	{
		Equals = false;
		DoesNotEqual = true;
	}
	else
	{
		DoesNotEqual = false;
		Equals = true;
	}
	_compareMutex.ReleaseMutex();
}
/* #endregion */

/* #region Events */
change value
{
	integer x;
	
	x = GetLastModifiedArrayIndex();
	
	while(!_ready);
	
	SetValue(x, value[x]);
	Compare();
}
/* #endregion */

/* #region Callbacks */

/* #endregion */

Function Main()
{
	DoesNotEqual = false;
	Equals = true;
	WaitForInitializationComplete();
	_ready = true;
}
