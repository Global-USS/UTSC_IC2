/* #region Header */
//#SYMBOL_NAME ""

//Author: Mat Klucznyk
//Company: Global USS
//Email: mathew.klucznyk@globaluss.com

//#USER_SIMPLSHARP_LIBRARY ""

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#DEFINE_CONSTANT true 1
#DEFINE_CONSTANT false 0
/* #endregion */

/* #region IO Constructor */
//inputs
digital_input PowerIsOn, Reset, PrintTimeToConsole;
//outputs
analog_output UsageHours;
string_output UsageHours$;

//parameters

/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

//objects
nonvolatile long_integer _seconds;
/* #endregion */

/* #region Functions */
function TriggerCounter()
{
	_seconds = _seconds + 1;
	
	if(_seconds % 3600 = 0)
	{
		UsageHours = LowWord(_seconds / 3600);
		UsageHours$ = ItoA(UsageHours);
	}
	Wait(100, usageW)
	{
		TriggerCounter();
	}
}


/* #endregion */

/* #region Events */
push PowerIsOn
{
	Wait(100, powerOnW)
	{
		TriggerCounter();
	}
}

release PowerIsOn
{
	CancelAllWait();
}

push Reset
{
	CancelAllWait();
	_seconds = 0;
	UsageHours = 0;
	UsageHours$ = ItoA(UsageHours);
	
	if(PowerIsOn)
	{
		Wait(100, resetPowerOnW)
		{
			TriggerCounter();
		}
	}
}

push PrintTimeToConsole
{
   trace("DisplayUsageCounter current time = %lu",_seconds);
}
/* #endregion */

/* #region Callbacks */

/* #endregion */

Function Main()
{
	WaitForInitializationComplete();

   if(_seconds >= 3600)
   {
      UsageHours = LowWord(_seconds / 3600);
		UsageHours$ = ItoA(UsageHours);
   }
   else
   {
      UsageHours = 0;
      UsageHours$ = ItoA(UsageHours);
   }
}