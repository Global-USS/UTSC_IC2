/* #region Header */
//#SYMBOL_NAME ""

//Author: Mat Klucznyk
//Company: Global USS
//Email: mathew.klucznyk@globaluss.com

//#USER_SIMPLSHARP_LIBRARY ""

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#DEFINE_CONSTANT true 1
#DEFINE_CONSTANT false 0
#DEFINE_CONSTANT maxIns 10
/* #endregion */

/* #region IO Constructor */
//inputs
digital_input i[maxIns,maxIns];
analog_input Input_Count_Override;

//outputs
digital_output AND_Out;

//parameters
integer_parameter _skip_, _skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,
Default_Input_Count;

/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

#BEGIN_PARAMETER_PROPERTIES Default_Input_Count
   propValidUnits = unitDecimal;
   propBounds = 1d , 10d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

//objects
integer _ready;
integer _bitCount;
integer _mask;
CMutex _mutex;

/* #endregion */

/* #region Functions */
integer_function IsMaskAllTrue(integer bitCount)
{
    integer allBitsSet;
    
    allBitsSet = (1 << bitCount) - 1;

    return ((_mask & allBitsSet) = allBitsSet);
}

function SetMask(integer index, integer state)
{
   _mutex.WaitForMutex();
   while(!_ready);

   if(state = true)
   {
      _mask = _mask | (1 << index);
   }
   else
   {
      _mask = _mask & NOT(1 << index);
   }

   AND_Out = IsMaskAllTrue(_bitCount);
   _mutex.ReleaseMutex();
}
/* #endregion */

/* #region Events */
push i
{
   integer index;

   index = GetLastModifiedArrayIndex();

   SetMask(index - 1, true);
}

release i
{
   integer index;

   index = GetLastModifiedArrayIndex();
   
   SetMask(index - 1, false);
}

change Input_Count_Override
{
   integer cnt;

   cnt = Input_Count_Override;

   if(cnt > maxIns) return;

   _mutex.WaitForMutex();
   while(!_ready);
   _bitCount = cnt;

   AND_Out = IsMaskAllTrue(_bitCount);
   _mutex.ReleaseMutex();
}
/* #endregion */

/* #region Callbacks */

/* #endregion */

Function Main()
{
	WaitForInitializationComplete();

   _bitCount = Default_Input_Count;
   _ready = true;
}