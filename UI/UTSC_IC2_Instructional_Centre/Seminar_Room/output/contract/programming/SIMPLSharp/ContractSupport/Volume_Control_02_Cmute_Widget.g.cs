//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     Version: 1.3501.16.0
//
//     Project:     Seminar_Room
//     Version:     1.0.0.0
//     Sdk:         CH5:2.11.1
//     Strategy:    Classic
//     IndexOnly:   True
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using Seminar_Room;

namespace Seminar_Room
{

    /// <summary>
    /// Volume_Control_02_Cmute_Widget
    /// </summary>
    public partial interface IVolume_Control_02_Cmute_Widget 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event Btn.CeilMicMuteTgl.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnCeilMicMuteTgl_PressEvent;

        /// <summary>
        /// Event Btn.PodMicVolDec.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnPodMicVolDec_PressEvent;

        /// <summary>
        /// Event Guage.PodMicVol.Lower Touch (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> GuagePodMicVol_LowerTouchEvent;

        /// <summary>
        /// Event Btn.podMicVolInc.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnpodMicVolInc_PressEvent;

        /// <summary>
        /// Event Guage.SrcVol.Lower Touch (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> GuageSrcVol_LowerTouchEvent;

        /// <summary>
        /// Event Btn.PodMicVolMuteTgl.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnPodMicVolMuteTgl_PressEvent;

        /// <summary>
        /// Event Btn.SrcVolDec.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnSrcVolDec_PressEvent;

        /// <summary>
        /// Event Btn.SrcVolInc.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnSrcVolInc_PressEvent;

        /// <summary>
        /// Event Btn.SrcVolMuteTgl.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnSrcVolMuteTgl_PressEvent;

        /// <summary>
        /// Btn.CeilMicMuteTgl.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BtnCeilMicMuteTgl_Selected(Volume_Control_02_Cmute_WidgetBoolInputSigDelegate callback);

        /// <summary>
        /// Btn.CeilMicMuteTgl.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BtnCeilMicMuteTgl_Selected(bool digital);

        /// <summary>
        /// Btn.PodMicVolMuteTgl.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BtnPodMicVolMuteTgl_Selected(Volume_Control_02_Cmute_WidgetBoolInputSigDelegate callback);

        /// <summary>
        /// Btn.PodMicVolMuteTgl.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BtnPodMicVolMuteTgl_Selected(bool digital);

        /// <summary>
        /// Btn.SrcVolMuteTgl.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BtnSrcVolMuteTgl_Selected(Volume_Control_02_Cmute_WidgetBoolInputSigDelegate callback);

        /// <summary>
        /// Btn.SrcVolMuteTgl.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BtnSrcVolMuteTgl_Selected(bool digital);

        /// <summary>
        /// Guage.PodMicVol.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        void GuagePodMicVol_LowerTouchfb(Volume_Control_02_Cmute_WidgetUShortInputSigDelegate callback);

        /// <summary>
        /// Guage.PodMicVol.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The ushort analog to update the panel.</param>
        void GuagePodMicVol_LowerTouchfb(ushort analog);

        /// <summary>
        /// Guage.PodMicVol.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The short analog to update the panel.</param>
        void GuagePodMicVol_LowerTouchfb(short analog);

        /// <summary>
        /// Guage.SrcVol.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        void GuageSrcVol_LowerTouchfb(Volume_Control_02_Cmute_WidgetUShortInputSigDelegate callback);

        /// <summary>
        /// Guage.SrcVol.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The ushort analog to update the panel.</param>
        void GuageSrcVol_LowerTouchfb(ushort analog);

        /// <summary>
        /// Guage.SrcVol.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The short analog to update the panel.</param>
        void GuageSrcVol_LowerTouchfb(short analog);
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="volume_control_02_cmute_widget">The <see cref="IVolume_Control_02_Cmute_Widget"/> on which to apply the feedback.</param>
    public delegate void Volume_Control_02_Cmute_WidgetBoolInputSigDelegate(BoolInputSig boolInputSig, IVolume_Control_02_Cmute_Widget volume_control_02_cmute_widget);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="uShortInputSig">The <see cref="UShortInputSig"/> joinInfo data.</param>
    /// <param name="volume_control_02_cmute_widget">The <see cref="IVolume_Control_02_Cmute_Widget"/> on which to apply the feedback.</param>
    public delegate void Volume_Control_02_Cmute_WidgetUShortInputSigDelegate(UShortInputSig uShortInputSig, IVolume_Control_02_Cmute_Widget volume_control_02_cmute_widget);

    /// <summary>
    /// Volume_Control_02_Cmute_Widget
    /// </summary>
    internal partial class Volume_Control_02_Cmute_Widget : IVolume_Control_02_Cmute_Widget, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Volume_Control_02_Cmute_Widget.BtnCeilMicMuteTgl.Press
                /// Btn.CeilMicMuteTgl.Press
                /// </summary>
                public const uint BtnCeilMicMuteTgl_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Volume_Control_02_Cmute_Widget.BtnPodMicVolDec.Press
                /// Btn.PodMicVolDec.Press
                /// </summary>
                public const uint BtnPodMicVolDec_PressEvent = 4;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Volume_Control_02_Cmute_Widget.BtnpodMicVolInc.Press
                /// Btn.podMicVolInc.Press
                /// </summary>
                public const uint BtnpodMicVolInc_PressEvent = 5;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Volume_Control_02_Cmute_Widget.BtnPodMicVolMuteTgl.Press
                /// Btn.PodMicVolMuteTgl.Press
                /// </summary>
                public const uint BtnPodMicVolMuteTgl_PressEvent = 6;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Volume_Control_02_Cmute_Widget.BtnSrcVolDec.Press
                /// Btn.SrcVolDec.Press
                /// </summary>
                public const uint BtnSrcVolDec_PressEvent = 7;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Volume_Control_02_Cmute_Widget.BtnSrcVolInc.Press
                /// Btn.SrcVolInc.Press
                /// </summary>
                public const uint BtnSrcVolInc_PressEvent = 8;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Volume_Control_02_Cmute_Widget.BtnSrcVolMuteTgl.Press
                /// Btn.SrcVolMuteTgl.Press
                /// </summary>
                public const uint BtnSrcVolMuteTgl_PressEvent = 9;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Volume_Control_02_Cmute_Widget.BtnCeilMicMuteTgl.Selected
                /// Btn.CeilMicMuteTgl.Selected
                /// </summary>
                public const uint BtnCeilMicMuteTgl_SelectedState = 3;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Volume_Control_02_Cmute_Widget.BtnPodMicVolMuteTgl.Selected
                /// Btn.PodMicVolMuteTgl.Selected
                /// </summary>
                public const uint BtnPodMicVolMuteTgl_SelectedState = 4;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Volume_Control_02_Cmute_Widget.BtnSrcVolMuteTgl.Selected
                /// Btn.SrcVolMuteTgl.Selected
                /// </summary>
                public const uint BtnSrcVolMuteTgl_SelectedState = 5;

            }
            /// <summary>
            /// Analog signals.
            /// </summary>
            internal static class Numerics
            {
                /// <summary>
                /// Output or Event analog joinInfo from panel to Control System: Volume_Control_02_Cmute_Widget.GuagePodMicVol.LowerTouch
                /// Guage.PodMicVol.Lower Touch
                /// </summary>
                public const uint GuagePodMicVol_LowerTouchEvent = 4;

                /// <summary>
                /// Output or Event analog joinInfo from panel to Control System: Volume_Control_02_Cmute_Widget.GuageSrcVol.LowerTouch
                /// Guage.SrcVol.Lower Touch
                /// </summary>
                public const uint GuageSrcVol_LowerTouchEvent = 5;


                /// <summary>
                /// Input or Feedback analog joinInfo from Control System to panel: Volume_Control_02_Cmute_Widget.GuagePodMicVol.LowerTouchfb
                /// Guage.PodMicVol.Lower Touch fb
                /// </summary>
                public const uint GuagePodMicVol_LowerTouchfbState = 4;

                /// <summary>
                /// Input or Feedback analog joinInfo from Control System to panel: Volume_Control_02_Cmute_Widget.GuageSrcVol.LowerTouchfb
                /// Guage.SrcVol.Lower Touch fb
                /// </summary>
                public const uint GuageSrcVol_LowerTouchfbState = 5;

            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="Volume_Control_02_Cmute_Widget"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal Volume_Control_02_Cmute_Widget(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Volume_Control_02_Cmute_Widget"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal Volume_Control_02_Cmute_Widget(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Volume_Control_02_Cmute_Widget"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 

            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnCeilMicMuteTgl_PressEvent, onBtnCeilMicMuteTgl_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnPodMicVolDec_PressEvent, onBtnPodMicVolDec_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnpodMicVolInc_PressEvent, onBtnpodMicVolInc_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnPodMicVolMuteTgl_PressEvent, onBtnPodMicVolMuteTgl_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnSrcVolDec_PressEvent, onBtnSrcVolDec_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnSrcVolInc_PressEvent, onBtnSrcVolInc_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnSrcVolMuteTgl_PressEvent, onBtnSrcVolMuteTgl_Press);
            ComponentMediator.ConfigureNumericEvent(controlJoinId, Joins.Numerics.GuagePodMicVol_LowerTouchEvent, onGuagePodMicVol_LowerTouch);
            ComponentMediator.ConfigureNumericEvent(controlJoinId, Joins.Numerics.GuageSrcVol_LowerTouchEvent, onGuageSrcVol_LowerTouch);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnCeilMicMuteTgl_PressEvent;
        private void onBtnCeilMicMuteTgl_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnCeilMicMuteTgl_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnPodMicVolDec_PressEvent;
        private void onBtnPodMicVolDec_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnPodMicVolDec_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> GuagePodMicVol_LowerTouchEvent;
        private void onGuagePodMicVol_LowerTouch(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = GuagePodMicVol_LowerTouchEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnpodMicVolInc_PressEvent;
        private void onBtnpodMicVolInc_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnpodMicVolInc_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> GuageSrcVol_LowerTouchEvent;
        private void onGuageSrcVol_LowerTouch(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = GuageSrcVol_LowerTouchEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnPodMicVolMuteTgl_PressEvent;
        private void onBtnPodMicVolMuteTgl_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnPodMicVolMuteTgl_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnSrcVolDec_PressEvent;
        private void onBtnSrcVolDec_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnSrcVolDec_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnSrcVolInc_PressEvent;
        private void onBtnSrcVolInc_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnSrcVolInc_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnSrcVolMuteTgl_PressEvent;
        private void onBtnSrcVolMuteTgl_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnSrcVolMuteTgl_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void BtnCeilMicMuteTgl_Selected(Volume_Control_02_Cmute_WidgetBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BtnCeilMicMuteTgl_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void BtnCeilMicMuteTgl_Selected(bool digital)
        {
            BtnCeilMicMuteTgl_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void BtnPodMicVolMuteTgl_Selected(Volume_Control_02_Cmute_WidgetBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BtnPodMicVolMuteTgl_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void BtnPodMicVolMuteTgl_Selected(bool digital)
        {
            BtnPodMicVolMuteTgl_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void BtnSrcVolMuteTgl_Selected(Volume_Control_02_Cmute_WidgetBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BtnSrcVolMuteTgl_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void BtnSrcVolMuteTgl_Selected(bool digital)
        {
            BtnSrcVolMuteTgl_Selected((sig, component) => sig.BoolValue = digital);
        }

        /// <inheritdoc/>
        public void GuagePodMicVol_LowerTouchfb(Volume_Control_02_Cmute_WidgetUShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.GuagePodMicVol_LowerTouchfbState], this);
            }
        }

        /// <inheritdoc/>
        public void GuagePodMicVol_LowerTouchfb(ushort analog)
        {
            GuagePodMicVol_LowerTouchfb((sig, component) => sig.UShortValue = analog);
        }

        /// <inheritdoc/>
        public void GuagePodMicVol_LowerTouchfb(short analog)
        {
            GuagePodMicVol_LowerTouchfb((sig, component) => sig.ShortValue = analog);
        }
        /// <inheritdoc/>
        public void GuageSrcVol_LowerTouchfb(Volume_Control_02_Cmute_WidgetUShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.GuageSrcVol_LowerTouchfbState], this);
            }
        }

        /// <inheritdoc/>
        public void GuageSrcVol_LowerTouchfb(ushort analog)
        {
            GuageSrcVol_LowerTouchfb((sig, component) => sig.UShortValue = analog);
        }

        /// <inheritdoc/>
        public void GuageSrcVol_LowerTouchfb(short analog)
        {
            GuageSrcVol_LowerTouchfb((sig, component) => sig.ShortValue = analog);
        }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "Volume_Control_02_Cmute_Widget", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            BtnCeilMicMuteTgl_PressEvent = null;
            BtnPodMicVolDec_PressEvent = null;
            GuagePodMicVol_LowerTouchEvent = null;
            BtnpodMicVolInc_PressEvent = null;
            GuageSrcVol_LowerTouchEvent = null;
            BtnPodMicVolMuteTgl_PressEvent = null;
            BtnSrcVolDec_PressEvent = null;
            BtnSrcVolInc_PressEvent = null;
            BtnSrcVolMuteTgl_PressEvent = null;
        }

        #endregion
    }
}
