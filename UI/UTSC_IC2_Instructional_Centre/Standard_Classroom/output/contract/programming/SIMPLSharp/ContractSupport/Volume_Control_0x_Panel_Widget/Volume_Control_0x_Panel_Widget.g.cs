//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.1.48.0
//     UI Plugin:   1.3601.24.0
//
//     Project:     Standard_Classroom
//     Version:     1.0.0.0
//     Sdk:         CH5:2.10.0
//     Strategy:    Classic
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using Standard_Classroom;

namespace Standard_Classroom.Volume_Control_0x_Panel_Widget
{

    /// <summary>
    /// Volume_Control_0x_Panel_Widget
    /// </summary>
    public partial interface IVolume_Control_0x_Panel_Widget 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event Btn.PodMicVolDec.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnPodMicVolDec_PressEvent;

        /// <summary>
        /// Event Btn.PodMicVolInc.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnPodMicVolInc_PressEvent;

        /// <summary>
        /// Event Guage.PodMicVol.Lower Touch (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> GuagePodMicVol_LowerTouchEvent;

        /// <summary>
        /// Event Btn.PodMicVolMuteTgl.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnPodMicVolMuteTgl_PressEvent;

        /// <summary>
        /// Event Guage.SrcVol.Lower Touch (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> GuageSrcVol_LowerTouchEvent;

        /// <summary>
        /// Event Btn.SrcVolDec.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnSrcVolDec_PressEvent;

        /// <summary>
        /// Event Guage.WirelessMicVol.Lower Touch (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> GuageWirelessMicVol_LowerTouchEvent;

        /// <summary>
        /// Event Btn.SrcVolInc.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnSrcVolInc_PressEvent;

        /// <summary>
        /// Event Btn.SrcVolMuteTgl.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnSrcVolMuteTgl_PressEvent;

        /// <summary>
        /// Event Btn.WirelessMicVolDec.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnWirelessMicVolDec_PressEvent;

        /// <summary>
        /// Event Btn.WirelessMicVolInc.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnWirelessMicVolInc_PressEvent;

        /// <summary>
        /// Event Btn.WirelessMicVolMuteTgl.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnWirelessMicVolMuteTgl_PressEvent;

        /// <summary>
        /// Btn.PodMicVolMuteTgl.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BtnPodMicVolMuteTgl_Selected(Volume_Control_0x_Panel_WidgetBoolInputSigDelegate callback);

        /// <summary>
        /// Btn.PodMicVolMuteTgl.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BtnPodMicVolMuteTgl_Selected(bool digital);

        /// <summary>
        /// Btn.SrcVolMuteTgl.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BtnSrcVolMuteTgl_Selected(Volume_Control_0x_Panel_WidgetBoolInputSigDelegate callback);

        /// <summary>
        /// Btn.SrcVolMuteTgl.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BtnSrcVolMuteTgl_Selected(bool digital);

        /// <summary>
        /// Btn.WirelessMicVolMuteTgl.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BtnWirelessMicVolMuteTgl_Selected(Volume_Control_0x_Panel_WidgetBoolInputSigDelegate callback);

        /// <summary>
        /// Btn.WirelessMicVolMuteTgl.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BtnWirelessMicVolMuteTgl_Selected(bool digital);

        /// <summary>
        /// Guage.PodMicVol.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        void GuagePodMicVol_LowerTouchfb(Volume_Control_0x_Panel_WidgetUShortInputSigDelegate callback);

        /// <summary>
        /// Guage.PodMicVol.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The ushort analog to update the panel.</param>
        void GuagePodMicVol_LowerTouchfb(ushort analog);

        /// <summary>
        /// Guage.PodMicVol.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The short analog to update the panel.</param>
        void GuagePodMicVol_LowerTouchfb(short analog);

        /// <summary>
        /// Guage.SrcVol.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        void GuageSrcVol_LowerTouchfb(Volume_Control_0x_Panel_WidgetUShortInputSigDelegate callback);

        /// <summary>
        /// Guage.SrcVol.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The ushort analog to update the panel.</param>
        void GuageSrcVol_LowerTouchfb(ushort analog);

        /// <summary>
        /// Guage.SrcVol.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The short analog to update the panel.</param>
        void GuageSrcVol_LowerTouchfb(short analog);

        /// <summary>
        /// Guage.WirelessMicVol.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        void GuageWirelessMicVol_LowerTouchfb(Volume_Control_0x_Panel_WidgetUShortInputSigDelegate callback);

        /// <summary>
        /// Guage.WirelessMicVol.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The ushort analog to update the panel.</param>
        void GuageWirelessMicVol_LowerTouchfb(ushort analog);

        /// <summary>
        /// Guage.WirelessMicVol.Lower Touch fb Feedback
        /// </summary>
        /// <param name="callback">The short analog to update the panel.</param>
        void GuageWirelessMicVol_LowerTouchfb(short analog);

        /// <summary>
        /// Str.WirelessMicVolName.Indirect Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void StrWirelessMicVolName_Indirect(Volume_Control_0x_Panel_WidgetStringInputSigDelegate callback);

        /// <summary>
        /// Str.WirelessMicVolName.Indirect Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void StrWirelessMicVolName_Indirect(string serial);

        /// <summary>
        /// ComplexComponent List.MicSelection
        /// </summary>
        Standard_Classroom.Volume_Control_0x_Panel_Widget.IListMicSelection ListMicSelection { get; }
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="volume_control_0x_panel_widget">The <see cref="IVolume_Control_0x_Panel_Widget"/> on which to apply the feedback.</param>
    public delegate void Volume_Control_0x_Panel_WidgetBoolInputSigDelegate(BoolInputSig boolInputSig, IVolume_Control_0x_Panel_Widget volume_control_0x_panel_widget);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="uShortInputSig">The <see cref="UShortInputSig"/> joinInfo data.</param>
    /// <param name="volume_control_0x_panel_widget">The <see cref="IVolume_Control_0x_Panel_Widget"/> on which to apply the feedback.</param>
    public delegate void Volume_Control_0x_Panel_WidgetUShortInputSigDelegate(UShortInputSig uShortInputSig, IVolume_Control_0x_Panel_Widget volume_control_0x_panel_widget);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="volume_control_0x_panel_widget">The <see cref="IVolume_Control_0x_Panel_Widget"/> on which to apply the feedback.</param>
    public delegate void Volume_Control_0x_Panel_WidgetStringInputSigDelegate(StringInputSig stringInputSig, IVolume_Control_0x_Panel_Widget volume_control_0x_panel_widget);

    /// <summary>
    /// Volume_Control_0x_Panel_Widget
    /// </summary>
    internal partial class Volume_Control_0x_Panel_Widget : IVolume_Control_0x_Panel_Widget, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Volume_Control_0x_Panel_Widget.BtnPodMicVolDec.Press
                /// Btn.PodMicVolDec.Press
                /// </summary>
                public const uint BtnPodMicVolDec_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Volume_Control_0x_Panel_Widget.BtnPodMicVolInc.Press
                /// Btn.PodMicVolInc.Press
                /// </summary>
                public const uint BtnPodMicVolInc_PressEvent = 4;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Volume_Control_0x_Panel_Widget.BtnPodMicVolMuteTgl.Press
                /// Btn.PodMicVolMuteTgl.Press
                /// </summary>
                public const uint BtnPodMicVolMuteTgl_PressEvent = 5;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Volume_Control_0x_Panel_Widget.BtnSrcVolDec.Press
                /// Btn.SrcVolDec.Press
                /// </summary>
                public const uint BtnSrcVolDec_PressEvent = 6;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Volume_Control_0x_Panel_Widget.BtnSrcVolInc.Press
                /// Btn.SrcVolInc.Press
                /// </summary>
                public const uint BtnSrcVolInc_PressEvent = 7;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Volume_Control_0x_Panel_Widget.BtnSrcVolMuteTgl.Press
                /// Btn.SrcVolMuteTgl.Press
                /// </summary>
                public const uint BtnSrcVolMuteTgl_PressEvent = 8;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Volume_Control_0x_Panel_Widget.BtnWirelessMicVolDec.Press
                /// Btn.WirelessMicVolDec.Press
                /// </summary>
                public const uint BtnWirelessMicVolDec_PressEvent = 9;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Volume_Control_0x_Panel_Widget.BtnWirelessMicVolInc.Press
                /// Btn.WirelessMicVolInc.Press
                /// </summary>
                public const uint BtnWirelessMicVolInc_PressEvent = 10;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Volume_Control_0x_Panel_Widget.BtnWirelessMicVolMuteTgl.Press
                /// Btn.WirelessMicVolMuteTgl.Press
                /// </summary>
                public const uint BtnWirelessMicVolMuteTgl_PressEvent = 11;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Volume_Control_0x_Panel_Widget.BtnPodMicVolMuteTgl.Selected
                /// Btn.PodMicVolMuteTgl.Selected
                /// </summary>
                public const uint BtnPodMicVolMuteTgl_SelectedState = 3;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Volume_Control_0x_Panel_Widget.BtnSrcVolMuteTgl.Selected
                /// Btn.SrcVolMuteTgl.Selected
                /// </summary>
                public const uint BtnSrcVolMuteTgl_SelectedState = 4;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Volume_Control_0x_Panel_Widget.BtnWirelessMicVolMuteTgl.Selected
                /// Btn.WirelessMicVolMuteTgl.Selected
                /// </summary>
                public const uint BtnWirelessMicVolMuteTgl_SelectedState = 5;

            }
            /// <summary>
            /// Analog signals.
            /// </summary>
            internal static class Numerics
            {
                /// <summary>
                /// Output or Event analog joinInfo from panel to Control System: Volume_Control_0x_Panel_Widget.GuagePodMicVol.LowerTouch
                /// Guage.PodMicVol.Lower Touch
                /// </summary>
                public const uint GuagePodMicVol_LowerTouchEvent = 4;

                /// <summary>
                /// Output or Event analog joinInfo from panel to Control System: Volume_Control_0x_Panel_Widget.GuageSrcVol.LowerTouch
                /// Guage.SrcVol.Lower Touch
                /// </summary>
                public const uint GuageSrcVol_LowerTouchEvent = 5;

                /// <summary>
                /// Output or Event analog joinInfo from panel to Control System: Volume_Control_0x_Panel_Widget.GuageWirelessMicVol.LowerTouch
                /// Guage.WirelessMicVol.Lower Touch
                /// </summary>
                public const uint GuageWirelessMicVol_LowerTouchEvent = 6;


                /// <summary>
                /// Input or Feedback analog joinInfo from Control System to panel: Volume_Control_0x_Panel_Widget.GuagePodMicVol.LowerTouchfb
                /// Guage.PodMicVol.Lower Touch fb
                /// </summary>
                public const uint GuagePodMicVol_LowerTouchfbState = 4;

                /// <summary>
                /// Input or Feedback analog joinInfo from Control System to panel: Volume_Control_0x_Panel_Widget.GuageSrcVol.LowerTouchfb
                /// Guage.SrcVol.Lower Touch fb
                /// </summary>
                public const uint GuageSrcVol_LowerTouchfbState = 5;

                /// <summary>
                /// Input or Feedback analog joinInfo from Control System to panel: Volume_Control_0x_Panel_Widget.GuageWirelessMicVol.LowerTouchfb
                /// Guage.WirelessMicVol.Lower Touch fb
                /// </summary>
                public const uint GuageWirelessMicVol_LowerTouchfbState = 6;

            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {

                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Volume_Control_0x_Panel_Widget.StrWirelessMicVolName.Indirect
                /// Str.WirelessMicVolName.Indirect
                /// </summary>
                public const uint StrWirelessMicVolName_IndirectState = 1;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="Volume_Control_0x_Panel_Widget"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal Volume_Control_0x_Panel_Widget(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Volume_Control_0x_Panel_Widget"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal Volume_Control_0x_Panel_Widget(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Volume_Control_0x_Panel_Widget"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 

            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnPodMicVolDec_PressEvent, onBtnPodMicVolDec_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnPodMicVolInc_PressEvent, onBtnPodMicVolInc_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnPodMicVolMuteTgl_PressEvent, onBtnPodMicVolMuteTgl_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnSrcVolDec_PressEvent, onBtnSrcVolDec_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnSrcVolInc_PressEvent, onBtnSrcVolInc_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnSrcVolMuteTgl_PressEvent, onBtnSrcVolMuteTgl_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnWirelessMicVolDec_PressEvent, onBtnWirelessMicVolDec_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnWirelessMicVolInc_PressEvent, onBtnWirelessMicVolInc_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnWirelessMicVolMuteTgl_PressEvent, onBtnWirelessMicVolMuteTgl_Press);
            ComponentMediator.ConfigureNumericEvent(controlJoinId, Joins.Numerics.GuagePodMicVol_LowerTouchEvent, onGuagePodMicVol_LowerTouch);
            ComponentMediator.ConfigureNumericEvent(controlJoinId, Joins.Numerics.GuageSrcVol_LowerTouchEvent, onGuageSrcVol_LowerTouch);
            ComponentMediator.ConfigureNumericEvent(controlJoinId, Joins.Numerics.GuageWirelessMicVol_LowerTouchEvent, onGuageWirelessMicVol_LowerTouch);
            ListMicSelection = new Standard_Classroom.Volume_Control_0x_Panel_Widget.ListMicSelection(ComponentMediator, 22);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((Standard_Classroom.Volume_Control_0x_Panel_Widget.ListMicSelection)ListMicSelection).AddDevice(device);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((Standard_Classroom.Volume_Control_0x_Panel_Widget.ListMicSelection)ListMicSelection).RemoveDevice(device);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnPodMicVolDec_PressEvent;
        private void onBtnPodMicVolDec_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnPodMicVolDec_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnPodMicVolInc_PressEvent;
        private void onBtnPodMicVolInc_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnPodMicVolInc_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> GuagePodMicVol_LowerTouchEvent;
        private void onGuagePodMicVol_LowerTouch(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = GuagePodMicVol_LowerTouchEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnPodMicVolMuteTgl_PressEvent;
        private void onBtnPodMicVolMuteTgl_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnPodMicVolMuteTgl_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> GuageSrcVol_LowerTouchEvent;
        private void onGuageSrcVol_LowerTouch(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = GuageSrcVol_LowerTouchEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnSrcVolDec_PressEvent;
        private void onBtnSrcVolDec_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnSrcVolDec_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> GuageWirelessMicVol_LowerTouchEvent;
        private void onGuageWirelessMicVol_LowerTouch(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = GuageWirelessMicVol_LowerTouchEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnSrcVolInc_PressEvent;
        private void onBtnSrcVolInc_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnSrcVolInc_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnSrcVolMuteTgl_PressEvent;
        private void onBtnSrcVolMuteTgl_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnSrcVolMuteTgl_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnWirelessMicVolDec_PressEvent;
        private void onBtnWirelessMicVolDec_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnWirelessMicVolDec_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnWirelessMicVolInc_PressEvent;
        private void onBtnWirelessMicVolInc_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnWirelessMicVolInc_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnWirelessMicVolMuteTgl_PressEvent;
        private void onBtnWirelessMicVolMuteTgl_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnWirelessMicVolMuteTgl_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void BtnPodMicVolMuteTgl_Selected(Volume_Control_0x_Panel_WidgetBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BtnPodMicVolMuteTgl_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void BtnPodMicVolMuteTgl_Selected(bool digital)
        {
            BtnPodMicVolMuteTgl_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void BtnSrcVolMuteTgl_Selected(Volume_Control_0x_Panel_WidgetBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BtnSrcVolMuteTgl_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void BtnSrcVolMuteTgl_Selected(bool digital)
        {
            BtnSrcVolMuteTgl_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void BtnWirelessMicVolMuteTgl_Selected(Volume_Control_0x_Panel_WidgetBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BtnWirelessMicVolMuteTgl_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void BtnWirelessMicVolMuteTgl_Selected(bool digital)
        {
            BtnWirelessMicVolMuteTgl_Selected((sig, component) => sig.BoolValue = digital);
        }

        /// <inheritdoc/>
        public void GuagePodMicVol_LowerTouchfb(Volume_Control_0x_Panel_WidgetUShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.GuagePodMicVol_LowerTouchfbState], this);
            }
        }

        /// <inheritdoc/>
        public void GuagePodMicVol_LowerTouchfb(ushort analog)
        {
            GuagePodMicVol_LowerTouchfb((sig, component) => sig.UShortValue = analog);
        }

        /// <inheritdoc/>
        public void GuagePodMicVol_LowerTouchfb(short analog)
        {
            GuagePodMicVol_LowerTouchfb((sig, component) => sig.ShortValue = analog);
        }
        /// <inheritdoc/>
        public void GuageSrcVol_LowerTouchfb(Volume_Control_0x_Panel_WidgetUShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.GuageSrcVol_LowerTouchfbState], this);
            }
        }

        /// <inheritdoc/>
        public void GuageSrcVol_LowerTouchfb(ushort analog)
        {
            GuageSrcVol_LowerTouchfb((sig, component) => sig.UShortValue = analog);
        }

        /// <inheritdoc/>
        public void GuageSrcVol_LowerTouchfb(short analog)
        {
            GuageSrcVol_LowerTouchfb((sig, component) => sig.ShortValue = analog);
        }
        /// <inheritdoc/>
        public void GuageWirelessMicVol_LowerTouchfb(Volume_Control_0x_Panel_WidgetUShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.GuageWirelessMicVol_LowerTouchfbState], this);
            }
        }

        /// <inheritdoc/>
        public void GuageWirelessMicVol_LowerTouchfb(ushort analog)
        {
            GuageWirelessMicVol_LowerTouchfb((sig, component) => sig.UShortValue = analog);
        }

        /// <inheritdoc/>
        public void GuageWirelessMicVol_LowerTouchfb(short analog)
        {
            GuageWirelessMicVol_LowerTouchfb((sig, component) => sig.ShortValue = analog);
        }

        /// <inheritdoc/>
        public void StrWirelessMicVolName_Indirect(Volume_Control_0x_Panel_WidgetStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.StrWirelessMicVolName_IndirectState], this);
            }
        }

        /// <inheritdoc/>
        public void StrWirelessMicVolName_Indirect(string serial)
        {
            StrWirelessMicVolName_Indirect((sig, component) => sig.StringValue = serial);
        }

        /// <summary>
        /// ComplexComponent List.MicSelection
        /// </summary>
        public Standard_Classroom.Volume_Control_0x_Panel_Widget.IListMicSelection ListMicSelection { get; private set; }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "Volume_Control_0x_Panel_Widget", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            BtnPodMicVolDec_PressEvent = null;
            BtnPodMicVolInc_PressEvent = null;
            GuagePodMicVol_LowerTouchEvent = null;
            BtnPodMicVolMuteTgl_PressEvent = null;
            GuageSrcVol_LowerTouchEvent = null;
            BtnSrcVolDec_PressEvent = null;
            GuageWirelessMicVol_LowerTouchEvent = null;
            BtnSrcVolInc_PressEvent = null;
            BtnSrcVolMuteTgl_PressEvent = null;
            BtnWirelessMicVolDec_PressEvent = null;
            BtnWirelessMicVolInc_PressEvent = null;
            BtnWirelessMicVolMuteTgl_PressEvent = null;
        }

        #endregion
    }
}
