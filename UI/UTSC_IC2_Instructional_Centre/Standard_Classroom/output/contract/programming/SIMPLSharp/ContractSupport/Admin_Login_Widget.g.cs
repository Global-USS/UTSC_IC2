//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     Version: 1.3400.21.0
//
//     Project:     Standard_Classroom
//     Version:     1.0.0.0
//     Sdk:         CH5:2.10.0
//     Strategy:    Classic
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharpPro.DeviceSupport;
using Crestron.SimplSharpPro;
using Standard_Classroom;

namespace Standard_Classroom
{

    /// <summary>
    /// Admin_Login_Widget
    /// </summary>
    public partial interface IAdmin_Login_Widget 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event Btn.ClearEntry.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnClearEntry_PressEvent;

        /// <summary>
        /// Event Btn.Key[0].Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnKey_0__PressEvent;

        /// <summary>
        /// Event Btn.Key[1].Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnKey_1__PressEvent;

        /// <summary>
        /// Event Btn.Key[2].Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnKey_2__PressEvent;

        /// <summary>
        /// Event Btn.Key[3].Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnKey_3__PressEvent;

        /// <summary>
        /// Event Btn.Key[4].Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnKey_4__PressEvent;

        /// <summary>
        /// Event Btn.Key[5].Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnKey_5__PressEvent;

        /// <summary>
        /// Event Btn.Key[6].Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnKey_6__PressEvent;

        /// <summary>
        /// Event Btn.Key[7].Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnKey_7__PressEvent;

        /// <summary>
        /// Event Btn.Key[8].Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnKey_8__PressEvent;

        /// <summary>
        /// Event Btn.Key[9].Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnKey_9__PressEvent;

        /// <summary>
        /// Event Btn.Key[Exit].Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnKey_Exit__PressEvent;

        /// <summary>
        /// Event Btn.Key[Submit].Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnKey_Submit__PressEvent;

        /// <summary>
        /// Str.Password.Indirect Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void StrPassword_Indirect(Admin_Login_WidgetStringInputSigDelegate callback);

        /// <summary>
        /// Str.Password.Indirect Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void StrPassword_Indirect(string serial);
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="admin_login_widget">The <see cref="IAdmin_Login_Widget"/> on which to apply the feedback.</param>
    public delegate void Admin_Login_WidgetBoolInputSigDelegate(BoolInputSig boolInputSig, IAdmin_Login_Widget admin_login_widget);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="admin_login_widget">The <see cref="IAdmin_Login_Widget"/> on which to apply the feedback.</param>
    public delegate void Admin_Login_WidgetStringInputSigDelegate(StringInputSig stringInputSig, IAdmin_Login_Widget admin_login_widget);

    /// <summary>
    /// Admin_Login_Widget
    /// </summary>
    internal partial class Admin_Login_Widget : IAdmin_Login_Widget, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Admin_Login_Widget.BtnClearEntry.Press
                /// Btn.ClearEntry.Press
                /// </summary>
                public const uint BtnClearEntry_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Admin_Login_Widget.BtnKey[0].Press
                /// Btn.Key[0].Press
                /// </summary>
                public const uint BtnKey_0__PressEvent = 4;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Admin_Login_Widget.BtnKey[1].Press
                /// Btn.Key[1].Press
                /// </summary>
                public const uint BtnKey_1__PressEvent = 5;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Admin_Login_Widget.BtnKey[2].Press
                /// Btn.Key[2].Press
                /// </summary>
                public const uint BtnKey_2__PressEvent = 6;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Admin_Login_Widget.BtnKey[3].Press
                /// Btn.Key[3].Press
                /// </summary>
                public const uint BtnKey_3__PressEvent = 7;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Admin_Login_Widget.BtnKey[4].Press
                /// Btn.Key[4].Press
                /// </summary>
                public const uint BtnKey_4__PressEvent = 8;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Admin_Login_Widget.BtnKey[5].Press
                /// Btn.Key[5].Press
                /// </summary>
                public const uint BtnKey_5__PressEvent = 9;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Admin_Login_Widget.BtnKey[6].Press
                /// Btn.Key[6].Press
                /// </summary>
                public const uint BtnKey_6__PressEvent = 10;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Admin_Login_Widget.BtnKey[7].Press
                /// Btn.Key[7].Press
                /// </summary>
                public const uint BtnKey_7__PressEvent = 11;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Admin_Login_Widget.BtnKey[8].Press
                /// Btn.Key[8].Press
                /// </summary>
                public const uint BtnKey_8__PressEvent = 12;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Admin_Login_Widget.BtnKey[9].Press
                /// Btn.Key[9].Press
                /// </summary>
                public const uint BtnKey_9__PressEvent = 13;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Admin_Login_Widget.BtnKey[Exit].Press
                /// Btn.Key[Exit].Press
                /// </summary>
                public const uint BtnKey_Exit__PressEvent = 14;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Admin_Login_Widget.BtnKey[Submit].Press
                /// Btn.Key[Submit].Press
                /// </summary>
                public const uint BtnKey_Submit__PressEvent = 15;


            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {

                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Admin_Login_Widget.StrPassword.Indirect
                /// Str.Password.Indirect
                /// </summary>
                public const uint StrPassword_IndirectState = 1;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="Admin_Login_Widget"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal Admin_Login_Widget(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Admin_Login_Widget"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal Admin_Login_Widget(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Admin_Login_Widget"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 

            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnClearEntry_PressEvent, onBtnClearEntry_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnKey_0__PressEvent, onBtnKey_0__Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnKey_1__PressEvent, onBtnKey_1__Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnKey_2__PressEvent, onBtnKey_2__Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnKey_3__PressEvent, onBtnKey_3__Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnKey_4__PressEvent, onBtnKey_4__Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnKey_5__PressEvent, onBtnKey_5__Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnKey_6__PressEvent, onBtnKey_6__Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnKey_7__PressEvent, onBtnKey_7__Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnKey_8__PressEvent, onBtnKey_8__Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnKey_9__PressEvent, onBtnKey_9__Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnKey_Exit__PressEvent, onBtnKey_Exit__Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnKey_Submit__PressEvent, onBtnKey_Submit__Press);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnClearEntry_PressEvent;
        private void onBtnClearEntry_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnClearEntry_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnKey_0__PressEvent;
        private void onBtnKey_0__Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnKey_0__PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnKey_1__PressEvent;
        private void onBtnKey_1__Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnKey_1__PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnKey_2__PressEvent;
        private void onBtnKey_2__Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnKey_2__PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnKey_3__PressEvent;
        private void onBtnKey_3__Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnKey_3__PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnKey_4__PressEvent;
        private void onBtnKey_4__Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnKey_4__PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnKey_5__PressEvent;
        private void onBtnKey_5__Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnKey_5__PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnKey_6__PressEvent;
        private void onBtnKey_6__Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnKey_6__PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnKey_7__PressEvent;
        private void onBtnKey_7__Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnKey_7__PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnKey_8__PressEvent;
        private void onBtnKey_8__Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnKey_8__PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnKey_9__PressEvent;
        private void onBtnKey_9__Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnKey_9__PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnKey_Exit__PressEvent;
        private void onBtnKey_Exit__Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnKey_Exit__PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnKey_Submit__PressEvent;
        private void onBtnKey_Submit__Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnKey_Submit__PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }



        /// <inheritdoc/>
        public void StrPassword_Indirect(Admin_Login_WidgetStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.StrPassword_IndirectState], this);
            }
        }

        /// <inheritdoc/>
        public void StrPassword_Indirect(string serial)
        {
            StrPassword_Indirect((sig, component) => sig.StringValue = serial);
        }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "Admin_Login_Widget", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            BtnClearEntry_PressEvent = null;
            BtnKey_0__PressEvent = null;
            BtnKey_1__PressEvent = null;
            BtnKey_2__PressEvent = null;
            BtnKey_3__PressEvent = null;
            BtnKey_4__PressEvent = null;
            BtnKey_5__PressEvent = null;
            BtnKey_6__PressEvent = null;
            BtnKey_7__PressEvent = null;
            BtnKey_8__PressEvent = null;
            BtnKey_9__PressEvent = null;
            BtnKey_Exit__PressEvent = null;
            BtnKey_Submit__PressEvent = null;
        }

        #endregion
    }
}
