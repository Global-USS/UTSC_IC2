//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     Version: 1.3400.21.0
//
//     Project:     Standard_Classroom
//     Version:     1.0.0.0
//     Sdk:         CH5:2.10.0
//     Strategy:    Classic
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharpPro.DeviceSupport;
using Crestron.SimplSharpPro;
using Standard_Classroom;

namespace Standard_Classroom.Proj_03_Source_04_Widget
{

    /// <summary>
    /// Proj_03_Source_04_Widget
    /// </summary>
    public partial interface IProj_03_Source_04_Widget 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event Btn.SendToAll.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnSendToAll_PressEvent;

        /// <summary>
        /// Event Btn.SendToProj[1].Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnSendToProj_1__PressEvent;

        /// <summary>
        /// Event Btn.SendToProj[2].Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnSendToProj_2__PressEvent;

        /// <summary>
        /// Event Btn.SendToProj[3].Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnSendToProj_3__PressEvent;

        /// <summary>
        /// Str.Proj[1]_CurrentSrc.Indirect Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void StrProj_1__CurrentSrc_Indirect(Proj_03_Source_04_WidgetStringInputSigDelegate callback);

        /// <summary>
        /// Str.Proj[1]_CurrentSrc.Indirect Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void StrProj_1__CurrentSrc_Indirect(string serial);

        /// <summary>
        /// Str.Proj[2]_CurrentSrc.Indirect Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void StrProj_2__CurrentSrc_Indirect(Proj_03_Source_04_WidgetStringInputSigDelegate callback);

        /// <summary>
        /// Str.Proj[2]_CurrentSrc.Indirect Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void StrProj_2__CurrentSrc_Indirect(string serial);

        /// <summary>
        /// Str.Proj[3]_CurrentSrc.Indirect Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void StrProj_3__CurrentSrc_Indirect(Proj_03_Source_04_WidgetStringInputSigDelegate callback);

        /// <summary>
        /// Str.Proj[3]_CurrentSrc.Indirect Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void StrProj_3__CurrentSrc_Indirect(string serial);

        /// <summary>
        /// ComplexComponent BtnList.SrcSelect
        /// </summary>
        Standard_Classroom.Proj_03_Source_04_Widget.IBtnListSrcSelect BtnListSrcSelect { get; }
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="proj_03_source_04_widget">The <see cref="IProj_03_Source_04_Widget"/> on which to apply the feedback.</param>
    public delegate void Proj_03_Source_04_WidgetBoolInputSigDelegate(BoolInputSig boolInputSig, IProj_03_Source_04_Widget proj_03_source_04_widget);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="proj_03_source_04_widget">The <see cref="IProj_03_Source_04_Widget"/> on which to apply the feedback.</param>
    public delegate void Proj_03_Source_04_WidgetStringInputSigDelegate(StringInputSig stringInputSig, IProj_03_Source_04_Widget proj_03_source_04_widget);

    /// <summary>
    /// Proj_03_Source_04_Widget
    /// </summary>
    internal partial class Proj_03_Source_04_Widget : IProj_03_Source_04_Widget, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Proj_03_Source_04_Widget.BtnSendToAll.Press
                /// Btn.SendToAll.Press
                /// </summary>
                public const uint BtnSendToAll_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Proj_03_Source_04_Widget.BtnSendToProj[1].Press
                /// Btn.SendToProj[1].Press
                /// </summary>
                public const uint BtnSendToProj_1__PressEvent = 4;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Proj_03_Source_04_Widget.BtnSendToProj[2].Press
                /// Btn.SendToProj[2].Press
                /// </summary>
                public const uint BtnSendToProj_2__PressEvent = 5;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Proj_03_Source_04_Widget.BtnSendToProj[3].Press
                /// Btn.SendToProj[3].Press
                /// </summary>
                public const uint BtnSendToProj_3__PressEvent = 6;


            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {

                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Proj_03_Source_04_Widget.StrProj[1]_CurrentSrc.Indirect
                /// Str.Proj[1]_CurrentSrc.Indirect
                /// </summary>
                public const uint StrProj_1__CurrentSrc_IndirectState = 1;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Proj_03_Source_04_Widget.StrProj[2]_CurrentSrc.Indirect
                /// Str.Proj[2]_CurrentSrc.Indirect
                /// </summary>
                public const uint StrProj_2__CurrentSrc_IndirectState = 2;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Proj_03_Source_04_Widget.StrProj[3]_CurrentSrc.Indirect
                /// Str.Proj[3]_CurrentSrc.Indirect
                /// </summary>
                public const uint StrProj_3__CurrentSrc_IndirectState = 3;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="Proj_03_Source_04_Widget"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal Proj_03_Source_04_Widget(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Proj_03_Source_04_Widget"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal Proj_03_Source_04_Widget(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Proj_03_Source_04_Widget"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 

            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnSendToAll_PressEvent, onBtnSendToAll_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnSendToProj_1__PressEvent, onBtnSendToProj_1__Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnSendToProj_2__PressEvent, onBtnSendToProj_2__Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnSendToProj_3__PressEvent, onBtnSendToProj_3__Press);
            BtnListSrcSelect = new Standard_Classroom.Proj_03_Source_04_Widget.BtnListSrcSelect(ComponentMediator, 24);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((Standard_Classroom.Proj_03_Source_04_Widget.BtnListSrcSelect)BtnListSrcSelect).AddDevice(device);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((Standard_Classroom.Proj_03_Source_04_Widget.BtnListSrcSelect)BtnListSrcSelect).RemoveDevice(device);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnSendToAll_PressEvent;
        private void onBtnSendToAll_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnSendToAll_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnSendToProj_1__PressEvent;
        private void onBtnSendToProj_1__Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnSendToProj_1__PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnSendToProj_2__PressEvent;
        private void onBtnSendToProj_2__Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnSendToProj_2__PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnSendToProj_3__PressEvent;
        private void onBtnSendToProj_3__Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnSendToProj_3__PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }



        /// <inheritdoc/>
        public void StrProj_1__CurrentSrc_Indirect(Proj_03_Source_04_WidgetStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.StrProj_1__CurrentSrc_IndirectState], this);
            }
        }

        /// <inheritdoc/>
        public void StrProj_1__CurrentSrc_Indirect(string serial)
        {
            StrProj_1__CurrentSrc_Indirect((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void StrProj_2__CurrentSrc_Indirect(Proj_03_Source_04_WidgetStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.StrProj_2__CurrentSrc_IndirectState], this);
            }
        }

        /// <inheritdoc/>
        public void StrProj_2__CurrentSrc_Indirect(string serial)
        {
            StrProj_2__CurrentSrc_Indirect((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void StrProj_3__CurrentSrc_Indirect(Proj_03_Source_04_WidgetStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.StrProj_3__CurrentSrc_IndirectState], this);
            }
        }

        /// <inheritdoc/>
        public void StrProj_3__CurrentSrc_Indirect(string serial)
        {
            StrProj_3__CurrentSrc_Indirect((sig, component) => sig.StringValue = serial);
        }

        /// <summary>
        /// ComplexComponent BtnList.SrcSelect
        /// </summary>
        public Standard_Classroom.Proj_03_Source_04_Widget.IBtnListSrcSelect BtnListSrcSelect { get; private set; }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "Proj_03_Source_04_Widget", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            BtnSendToAll_PressEvent = null;
            BtnSendToProj_1__PressEvent = null;
            BtnSendToProj_2__PressEvent = null;
            BtnSendToProj_3__PressEvent = null;
        }

        #endregion
    }
}
