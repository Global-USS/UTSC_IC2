//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     Version: 1.3400.21.0
//
//     Project:     Active_Learning_Classroom
//     Version:     1.0.0.0
//     Sdk:         CH5:2.10.0
//     Strategy:    Classic
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharpPro.DeviceSupport;
using Crestron.SimplSharpPro;
using Active_Learning_Classroom;

namespace Active_Learning_Classroom
{

    /// <summary>
    /// Cam_01_Control-Preset_Widget
    /// </summary>
    public partial interface ICam_01_ControlPreset_Widget 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event Btn.AutoTrackingTgl.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnAutoTrackingTgl_PressEvent;

        /// <summary>
        /// Event Btn.DPAD_Bottom.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnDPAD_Bottom_PressEvent;

        /// <summary>
        /// Event Btn.DPAD_Center.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnDPAD_Center_PressEvent;

        /// <summary>
        /// Event Btn.DPAD_Left.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnDPAD_Left_PressEvent;

        /// <summary>
        /// Event Btn.DPAD_Right.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnDPAD_Right_PressEvent;

        /// <summary>
        /// Event Btn.DPAD_Top.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnDPAD_Top_PressEvent;

        /// <summary>
        /// Event Btn.Preset[1].Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnPreset_1__PressEvent;

        /// <summary>
        /// Event Btn.Preset[2].Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnPreset_2__PressEvent;

        /// <summary>
        /// Event Btn.Preset[3].Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnPreset_3__PressEvent;

        /// <summary>
        /// Event Btn.ZoomIn.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnZoomIn_PressEvent;

        /// <summary>
        /// Event Btn.ZoomOut.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnZoomOut_PressEvent;

        /// <summary>
        /// Btn.AutoTrackingTgl.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BtnAutoTrackingTgl_Selected(Cam_01_ControlPreset_WidgetBoolInputSigDelegate callback);

        /// <summary>
        /// Btn.AutoTrackingTgl.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BtnAutoTrackingTgl_Selected(bool digital);

        /// <summary>
        /// Btn.Preset[1].Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BtnPreset_1__Selected(Cam_01_ControlPreset_WidgetBoolInputSigDelegate callback);

        /// <summary>
        /// Btn.Preset[1].Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BtnPreset_1__Selected(bool digital);

        /// <summary>
        /// Btn.Preset[2].Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BtnPreset_2__Selected(Cam_01_ControlPreset_WidgetBoolInputSigDelegate callback);

        /// <summary>
        /// Btn.Preset[2].Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BtnPreset_2__Selected(bool digital);

        /// <summary>
        /// Btn.Preset[3].Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BtnPreset_3__Selected(Cam_01_ControlPreset_WidgetBoolInputSigDelegate callback);

        /// <summary>
        /// Btn.Preset[3].Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BtnPreset_3__Selected(bool digital);
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="cam_01_controlpreset_widget">The <see cref="ICam_01_ControlPreset_Widget"/> on which to apply the feedback.</param>
    public delegate void Cam_01_ControlPreset_WidgetBoolInputSigDelegate(BoolInputSig boolInputSig, ICam_01_ControlPreset_Widget cam_01_controlpreset_widget);

    /// <summary>
    /// Cam_01_Control-Preset_Widget
    /// </summary>
    internal partial class Cam_01_ControlPreset_Widget : ICam_01_ControlPreset_Widget, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_01_ControlPreset_Widget.BtnAutoTrackingTgl.Press
                /// Btn.AutoTrackingTgl.Press
                /// </summary>
                public const uint BtnAutoTrackingTgl_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_01_ControlPreset_Widget.BtnDPAD_Bottom.Press
                /// Btn.DPAD_Bottom.Press
                /// </summary>
                public const uint BtnDPAD_Bottom_PressEvent = 4;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_01_ControlPreset_Widget.BtnDPAD_Center.Press
                /// Btn.DPAD_Center.Press
                /// </summary>
                public const uint BtnDPAD_Center_PressEvent = 5;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_01_ControlPreset_Widget.BtnDPAD_Left.Press
                /// Btn.DPAD_Left.Press
                /// </summary>
                public const uint BtnDPAD_Left_PressEvent = 6;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_01_ControlPreset_Widget.BtnDPAD_Right.Press
                /// Btn.DPAD_Right.Press
                /// </summary>
                public const uint BtnDPAD_Right_PressEvent = 7;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_01_ControlPreset_Widget.BtnDPAD_Top.Press
                /// Btn.DPAD_Top.Press
                /// </summary>
                public const uint BtnDPAD_Top_PressEvent = 8;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_01_ControlPreset_Widget.BtnPreset[1].Press
                /// Btn.Preset[1].Press
                /// </summary>
                public const uint BtnPreset_1__PressEvent = 9;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_01_ControlPreset_Widget.BtnPreset[2].Press
                /// Btn.Preset[2].Press
                /// </summary>
                public const uint BtnPreset_2__PressEvent = 10;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_01_ControlPreset_Widget.BtnPreset[3].Press
                /// Btn.Preset[3].Press
                /// </summary>
                public const uint BtnPreset_3__PressEvent = 11;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_01_ControlPreset_Widget.BtnZoomIn.Press
                /// Btn.ZoomIn.Press
                /// </summary>
                public const uint BtnZoomIn_PressEvent = 12;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_01_ControlPreset_Widget.BtnZoomOut.Press
                /// Btn.ZoomOut.Press
                /// </summary>
                public const uint BtnZoomOut_PressEvent = 13;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Cam_01_ControlPreset_Widget.BtnAutoTrackingTgl.Selected
                /// Btn.AutoTrackingTgl.Selected
                /// </summary>
                public const uint BtnAutoTrackingTgl_SelectedState = 3;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Cam_01_ControlPreset_Widget.BtnPreset[1].Selected
                /// Btn.Preset[1].Selected
                /// </summary>
                public const uint BtnPreset_1__SelectedState = 4;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Cam_01_ControlPreset_Widget.BtnPreset[2].Selected
                /// Btn.Preset[2].Selected
                /// </summary>
                public const uint BtnPreset_2__SelectedState = 5;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Cam_01_ControlPreset_Widget.BtnPreset[3].Selected
                /// Btn.Preset[3].Selected
                /// </summary>
                public const uint BtnPreset_3__SelectedState = 6;

            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="Cam_01_ControlPreset_Widget"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal Cam_01_ControlPreset_Widget(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Cam_01_ControlPreset_Widget"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal Cam_01_ControlPreset_Widget(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Cam_01_ControlPreset_Widget"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 

            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnAutoTrackingTgl_PressEvent, onBtnAutoTrackingTgl_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnDPAD_Bottom_PressEvent, onBtnDPAD_Bottom_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnDPAD_Center_PressEvent, onBtnDPAD_Center_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnDPAD_Left_PressEvent, onBtnDPAD_Left_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnDPAD_Right_PressEvent, onBtnDPAD_Right_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnDPAD_Top_PressEvent, onBtnDPAD_Top_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnPreset_1__PressEvent, onBtnPreset_1__Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnPreset_2__PressEvent, onBtnPreset_2__Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnPreset_3__PressEvent, onBtnPreset_3__Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnZoomIn_PressEvent, onBtnZoomIn_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnZoomOut_PressEvent, onBtnZoomOut_Press);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnAutoTrackingTgl_PressEvent;
        private void onBtnAutoTrackingTgl_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnAutoTrackingTgl_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnDPAD_Bottom_PressEvent;
        private void onBtnDPAD_Bottom_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnDPAD_Bottom_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnDPAD_Center_PressEvent;
        private void onBtnDPAD_Center_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnDPAD_Center_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnDPAD_Left_PressEvent;
        private void onBtnDPAD_Left_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnDPAD_Left_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnDPAD_Right_PressEvent;
        private void onBtnDPAD_Right_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnDPAD_Right_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnDPAD_Top_PressEvent;
        private void onBtnDPAD_Top_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnDPAD_Top_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnPreset_1__PressEvent;
        private void onBtnPreset_1__Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnPreset_1__PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnPreset_2__PressEvent;
        private void onBtnPreset_2__Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnPreset_2__PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnPreset_3__PressEvent;
        private void onBtnPreset_3__Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnPreset_3__PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnZoomIn_PressEvent;
        private void onBtnZoomIn_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnZoomIn_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnZoomOut_PressEvent;
        private void onBtnZoomOut_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnZoomOut_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void BtnAutoTrackingTgl_Selected(Cam_01_ControlPreset_WidgetBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BtnAutoTrackingTgl_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void BtnAutoTrackingTgl_Selected(bool digital)
        {
            BtnAutoTrackingTgl_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void BtnPreset_1__Selected(Cam_01_ControlPreset_WidgetBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BtnPreset_1__SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void BtnPreset_1__Selected(bool digital)
        {
            BtnPreset_1__Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void BtnPreset_2__Selected(Cam_01_ControlPreset_WidgetBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BtnPreset_2__SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void BtnPreset_2__Selected(bool digital)
        {
            BtnPreset_2__Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void BtnPreset_3__Selected(Cam_01_ControlPreset_WidgetBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BtnPreset_3__SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void BtnPreset_3__Selected(bool digital)
        {
            BtnPreset_3__Selected((sig, component) => sig.BoolValue = digital);
        }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "Cam_01_ControlPreset_Widget", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            BtnAutoTrackingTgl_PressEvent = null;
            BtnDPAD_Bottom_PressEvent = null;
            BtnDPAD_Center_PressEvent = null;
            BtnDPAD_Left_PressEvent = null;
            BtnDPAD_Right_PressEvent = null;
            BtnDPAD_Top_PressEvent = null;
            BtnPreset_1__PressEvent = null;
            BtnPreset_2__PressEvent = null;
            BtnPreset_3__PressEvent = null;
            BtnZoomIn_PressEvent = null;
            BtnZoomOut_PressEvent = null;
        }

        #endregion
    }
}
