//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     Version: 1.3400.21.0
//
//     Project:     The_Campfire_Theatre
//     Version:     1.0.0.0
//     Sdk:         CH5:2.8.0
//     Strategy:    Classic
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharpPro.DeviceSupport;
using Crestron.SimplSharpPro;
using The_Campfire_Theatre;

namespace The_Campfire_Theatre.Main_Page
{

    /// <summary>
    /// Main_Page
    /// </summary>
    public partial interface IMain_Page 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event Btn.AuRA.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnAuRA_PressEvent;

        /// <summary>
        /// Event Btn.PrivacyMuteTgl.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnPrivacyMuteTgl_PressEvent;

        /// <summary>
        /// Event Btn.SystemOff.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnSystemOff_PressEvent;

        /// <summary>
        /// Event Btn.VidWall.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnVidWall_PressEvent;

        /// <summary>
        /// Event Btn.Volume.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnVolume_PressEvent;

        /// <summary>
        /// Txt.LogOffMsg.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void TxtLogOffMsg_Visibility(Main_PageBoolInputSigDelegate callback);

        /// <summary>
        /// Txt.LogOffMsg.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void TxtLogOffMsg_Visibility(bool digital);

        /// <summary>
        /// Txt.WelcomeMsg.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void TxtWelcomeMsg_Visibility(Main_PageBoolInputSigDelegate callback);

        /// <summary>
        /// Txt.WelcomeMsg.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void TxtWelcomeMsg_Visibility(bool digital);

        /// <summary>
        /// Date Time.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void DateTime_Visibility(Main_PageBoolInputSigDelegate callback);

        /// <summary>
        /// Date Time.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void DateTime_Visibility(bool digital);

        /// <summary>
        /// Logo.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Logo_Visibility(Main_PageBoolInputSigDelegate callback);

        /// <summary>
        /// Logo.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Logo_Visibility(bool digital);

        /// <summary>
        /// Main_Page.VisibilityJoin Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Main_Page_VisibilityJoin(Main_PageBoolInputSigDelegate callback);

        /// <summary>
        /// Main_Page.VisibilityJoin Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Main_Page_VisibilityJoin(bool digital);

        /// <summary>
        /// Btn.SystemOff.Enable Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BtnSystemOff_Enable(Main_PageBoolInputSigDelegate callback);

        /// <summary>
        /// Btn.SystemOff.Enable Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BtnSystemOff_Enable(bool digital);

        /// <summary>
        /// Btn.AuRA.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BtnAuRA_Selected(Main_PageBoolInputSigDelegate callback);

        /// <summary>
        /// Btn.AuRA.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BtnAuRA_Selected(bool digital);

        /// <summary>
        /// Btn.PrivacyMuteTgl.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BtnPrivacyMuteTgl_Selected(Main_PageBoolInputSigDelegate callback);

        /// <summary>
        /// Btn.PrivacyMuteTgl.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BtnPrivacyMuteTgl_Selected(bool digital);

        /// <summary>
        /// Btn.VidWall.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BtnVidWall_Selected(Main_PageBoolInputSigDelegate callback);

        /// <summary>
        /// Btn.VidWall.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BtnVidWall_Selected(bool digital);

        /// <summary>
        /// Btn.Volume.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BtnVolume_Selected(Main_PageBoolInputSigDelegate callback);

        /// <summary>
        /// Btn.Volume.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BtnVolume_Selected(bool digital);

        /// <summary>
        /// ComplexComponent Admin_Login_Widget
        /// </summary>
        The_Campfire_Theatre.Main_Page.IAdmin_Login_Widget Admin_Login_Widget { get; }

        /// <summary>
        /// ComplexComponent VidWall_Control_Widget
        /// </summary>
        The_Campfire_Theatre.Main_Page.IVidWall_Control_Widget VidWall_Control_Widget { get; }

        /// <summary>
        /// ComplexComponent Source_04_Widget
        /// </summary>
        The_Campfire_Theatre.Main_Page.ISource_04_Widget Source_04_Widget { get; }

        /// <summary>
        /// ComplexComponent Cam_02_Control_Widget
        /// </summary>
        The_Campfire_Theatre.Main_Page.ICam_02_Control_Widget Cam_02_Control_Widget { get; }

        /// <summary>
        /// ComplexComponent Volume_Control_0x_Panel_Widget
        /// </summary>
        The_Campfire_Theatre.Main_Page.IVolume_Control_0x_Panel_Widget Volume_Control_0x_Panel_Widget { get; }

        /// <summary>
        /// ComplexComponent Volume_Control_03_Panel_Widget
        /// </summary>
        The_Campfire_Theatre.Main_Page.IVolume_Control_03_Panel_Widget Volume_Control_03_Panel_Widget { get; }
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="main_page">The <see cref="IMain_Page"/> on which to apply the feedback.</param>
    public delegate void Main_PageBoolInputSigDelegate(BoolInputSig boolInputSig, IMain_Page main_page);

    /// <summary>
    /// Main_Page
    /// </summary>
    internal partial class Main_Page : IMain_Page, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main_Page.BtnAuRA.Press
                /// Btn.AuRA.Press
                /// </summary>
                public const uint BtnAuRA_PressEvent = 1;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main_Page.BtnPrivacyMuteTgl.Press
                /// Btn.PrivacyMuteTgl.Press
                /// </summary>
                public const uint BtnPrivacyMuteTgl_PressEvent = 2;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main_Page.BtnSystemOff.Press
                /// Btn.SystemOff.Press
                /// </summary>
                public const uint BtnSystemOff_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main_Page.BtnVidWall.Press
                /// Btn.VidWall.Press
                /// </summary>
                public const uint BtnVidWall_PressEvent = 4;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Main_Page.BtnVolume.Press
                /// Btn.Volume.Press
                /// </summary>
                public const uint BtnVolume_PressEvent = 5;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main_Page.TxtLogOffMsg.Visibility
                /// Txt.LogOffMsg.Visibility
                /// </summary>
                public const uint TxtLogOffMsg_VisibilityState = 1;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main_Page.TxtWelcomeMsg.Visibility
                /// Txt.WelcomeMsg.Visibility
                /// </summary>
                public const uint TxtWelcomeMsg_VisibilityState = 2;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main_Page.DateTime.Visibility
                /// Date Time.Visibility
                /// </summary>
                public const uint DateTime_VisibilityState = 3;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main_Page.Logo.Visibility
                /// Logo.Visibility
                /// </summary>
                public const uint Logo_VisibilityState = 4;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main_PageVisibilityJoin
                /// Main_Page.VisibilityJoin
                /// </summary>
                public const uint Main_Page_VisibilityJoinState = 5;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main_Page.BtnSystemOff.Enable
                /// Btn.SystemOff.Enable
                /// </summary>
                public const uint BtnSystemOff_EnableState = 6;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main_Page.BtnAuRA.Selected
                /// Btn.AuRA.Selected
                /// </summary>
                public const uint BtnAuRA_SelectedState = 7;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main_Page.BtnPrivacyMuteTgl.Selected
                /// Btn.PrivacyMuteTgl.Selected
                /// </summary>
                public const uint BtnPrivacyMuteTgl_SelectedState = 8;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main_Page.BtnVidWall.Selected
                /// Btn.VidWall.Selected
                /// </summary>
                public const uint BtnVidWall_SelectedState = 9;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Main_Page.BtnVolume.Selected
                /// Btn.Volume.Selected
                /// </summary>
                public const uint BtnVolume_SelectedState = 10;

            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="Main_Page"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal Main_Page(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Main_Page"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal Main_Page(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Main_Page"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 

            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnAuRA_PressEvent, onBtnAuRA_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnPrivacyMuteTgl_PressEvent, onBtnPrivacyMuteTgl_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnSystemOff_PressEvent, onBtnSystemOff_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnVidWall_PressEvent, onBtnVidWall_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnVolume_PressEvent, onBtnVolume_Press);
            Admin_Login_Widget = new The_Campfire_Theatre.Main_Page.Admin_Login_Widget(ComponentMediator, 3);
            VidWall_Control_Widget = new The_Campfire_Theatre.Main_Page.VidWall_Control_Widget(ComponentMediator, 4);
            Source_04_Widget = new The_Campfire_Theatre.Main_Page.Source_04_Widget(ComponentMediator, 5);
            Cam_02_Control_Widget = new The_Campfire_Theatre.Main_Page.Cam_02_Control_Widget(ComponentMediator, 6);
            Volume_Control_0x_Panel_Widget = new The_Campfire_Theatre.Main_Page.Volume_Control_0x_Panel_Widget(ComponentMediator, 7);
            Volume_Control_03_Panel_Widget = new The_Campfire_Theatre.Main_Page.Volume_Control_03_Panel_Widget(ComponentMediator, 8);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((The_Campfire_Theatre.Main_Page.Admin_Login_Widget)Admin_Login_Widget).AddDevice(device);

            ((The_Campfire_Theatre.Main_Page.VidWall_Control_Widget)VidWall_Control_Widget).AddDevice(device);

            ((The_Campfire_Theatre.Main_Page.Source_04_Widget)Source_04_Widget).AddDevice(device);

            ((The_Campfire_Theatre.Main_Page.Cam_02_Control_Widget)Cam_02_Control_Widget).AddDevice(device);

            ((The_Campfire_Theatre.Main_Page.Volume_Control_0x_Panel_Widget)Volume_Control_0x_Panel_Widget).AddDevice(device);

            ((The_Campfire_Theatre.Main_Page.Volume_Control_03_Panel_Widget)Volume_Control_03_Panel_Widget).AddDevice(device);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((The_Campfire_Theatre.Main_Page.Admin_Login_Widget)Admin_Login_Widget).RemoveDevice(device);

            ((The_Campfire_Theatre.Main_Page.VidWall_Control_Widget)VidWall_Control_Widget).RemoveDevice(device);

            ((The_Campfire_Theatre.Main_Page.Source_04_Widget)Source_04_Widget).RemoveDevice(device);

            ((The_Campfire_Theatre.Main_Page.Cam_02_Control_Widget)Cam_02_Control_Widget).RemoveDevice(device);

            ((The_Campfire_Theatre.Main_Page.Volume_Control_0x_Panel_Widget)Volume_Control_0x_Panel_Widget).RemoveDevice(device);

            ((The_Campfire_Theatre.Main_Page.Volume_Control_03_Panel_Widget)Volume_Control_03_Panel_Widget).RemoveDevice(device);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnAuRA_PressEvent;
        private void onBtnAuRA_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnAuRA_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnPrivacyMuteTgl_PressEvent;
        private void onBtnPrivacyMuteTgl_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnPrivacyMuteTgl_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnSystemOff_PressEvent;
        private void onBtnSystemOff_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnSystemOff_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnVidWall_PressEvent;
        private void onBtnVidWall_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnVidWall_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnVolume_PressEvent;
        private void onBtnVolume_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnVolume_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void BtnAuRA_Selected(Main_PageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BtnAuRA_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void BtnAuRA_Selected(bool digital)
        {
            BtnAuRA_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void BtnPrivacyMuteTgl_Selected(Main_PageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BtnPrivacyMuteTgl_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void BtnPrivacyMuteTgl_Selected(bool digital)
        {
            BtnPrivacyMuteTgl_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void BtnSystemOff_Enable(Main_PageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BtnSystemOff_EnableState], this);
            }
        }

        /// <inheritdoc/>
        public void BtnSystemOff_Enable(bool digital)
        {
            BtnSystemOff_Enable((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void BtnVidWall_Selected(Main_PageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BtnVidWall_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void BtnVidWall_Selected(bool digital)
        {
            BtnVidWall_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void BtnVolume_Selected(Main_PageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BtnVolume_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void BtnVolume_Selected(bool digital)
        {
            BtnVolume_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void DateTime_Visibility(Main_PageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.DateTime_VisibilityState], this);
            }
        }

        /// <inheritdoc/>
        public void DateTime_Visibility(bool digital)
        {
            DateTime_Visibility((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Logo_Visibility(Main_PageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Logo_VisibilityState], this);
            }
        }

        /// <inheritdoc/>
        public void Logo_Visibility(bool digital)
        {
            Logo_Visibility((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Main_Page_VisibilityJoin(Main_PageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Main_Page_VisibilityJoinState], this);
            }
        }

        /// <inheritdoc/>
        public void Main_Page_VisibilityJoin(bool digital)
        {
            Main_Page_VisibilityJoin((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void TxtLogOffMsg_Visibility(Main_PageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.TxtLogOffMsg_VisibilityState], this);
            }
        }

        /// <inheritdoc/>
        public void TxtLogOffMsg_Visibility(bool digital)
        {
            TxtLogOffMsg_Visibility((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void TxtWelcomeMsg_Visibility(Main_PageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.TxtWelcomeMsg_VisibilityState], this);
            }
        }

        /// <inheritdoc/>
        public void TxtWelcomeMsg_Visibility(bool digital)
        {
            TxtWelcomeMsg_Visibility((sig, component) => sig.BoolValue = digital);
        }

        /// <summary>
        /// ComplexComponent Admin_Login_Widget
        /// </summary>
        public The_Campfire_Theatre.Main_Page.IAdmin_Login_Widget Admin_Login_Widget { get; private set; }

        /// <summary>
        /// ComplexComponent VidWall_Control_Widget
        /// </summary>
        public The_Campfire_Theatre.Main_Page.IVidWall_Control_Widget VidWall_Control_Widget { get; private set; }

        /// <summary>
        /// ComplexComponent Source_04_Widget
        /// </summary>
        public The_Campfire_Theatre.Main_Page.ISource_04_Widget Source_04_Widget { get; private set; }

        /// <summary>
        /// ComplexComponent Cam_02_Control_Widget
        /// </summary>
        public The_Campfire_Theatre.Main_Page.ICam_02_Control_Widget Cam_02_Control_Widget { get; private set; }

        /// <summary>
        /// ComplexComponent Volume_Control_0x_Panel_Widget
        /// </summary>
        public The_Campfire_Theatre.Main_Page.IVolume_Control_0x_Panel_Widget Volume_Control_0x_Panel_Widget { get; private set; }

        /// <summary>
        /// ComplexComponent Volume_Control_03_Panel_Widget
        /// </summary>
        public The_Campfire_Theatre.Main_Page.IVolume_Control_03_Panel_Widget Volume_Control_03_Panel_Widget { get; private set; }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "Main_Page", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            BtnAuRA_PressEvent = null;
            BtnPrivacyMuteTgl_PressEvent = null;
            BtnSystemOff_PressEvent = null;
            BtnVidWall_PressEvent = null;
            BtnVolume_PressEvent = null;
        }

        #endregion
    }
}
