//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.1.48.0
//     UI Plugin:   1.3601.24.0
//
//     Project:     The_Campfire_Theatre
//     Version:     1.0.0.0
//     Sdk:         CH5:2.10.0
//     Strategy:    Classic
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using The_Campfire_Theatre;

namespace The_Campfire_Theatre
{

    /// <summary>
    /// Cam_03_Control_Widget
    /// </summary>
    public partial interface ICam_03_Control_Widget 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event Btn.AutoTrackingTgl.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnAutoTrackingTgl_PressEvent;

        /// <summary>
        /// Event Btn.DPAD_Bottom.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnDPAD_Bottom_PressEvent;

        /// <summary>
        /// Event Btn.DPAD_Center.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnDPAD_Center_PressEvent;

        /// <summary>
        /// Event Btn.DPAD_Left.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnDPAD_Left_PressEvent;

        /// <summary>
        /// Event Btn.DPAD_Right.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnDPAD_Right_PressEvent;

        /// <summary>
        /// Event Btn.DPAD_Top.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnDPAD_Top_PressEvent;

        /// <summary>
        /// Event Btn.ZoomIn.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnZoomIn_PressEvent;

        /// <summary>
        /// Event Btn.ZoomOut.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> BtnZoomOut_PressEvent;

        /// <summary>
        /// Event Video.Cam[1].Pressed (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> VideoCam_1__PressedEvent;

        /// <summary>
        /// Event Video.Cam[2].Pressed (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> VideoCam_2__PressedEvent;

        /// <summary>
        /// Event Video.Cam[3].Pressed (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> VideoCam_3__PressedEvent;

        /// <summary>
        /// Indicator.Cam[1].Selected.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void IndicatorCam_1_Selected_Visibility_fb(Cam_03_Control_WidgetBoolInputSigDelegate callback);

        /// <summary>
        /// Indicator.Cam[1].Selected.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void IndicatorCam_1_Selected_Visibility_fb(bool digital);

        /// <summary>
        /// Indicator.Cam[2].Selected.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void IndicatorCam_2_Selected_Visibility_fb(Cam_03_Control_WidgetBoolInputSigDelegate callback);

        /// <summary>
        /// Indicator.Cam[2].Selected.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void IndicatorCam_2_Selected_Visibility_fb(bool digital);

        /// <summary>
        /// Indicator.Cam[3].Selected.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void IndicatorCam_3_Selected_Visibility_fb(Cam_03_Control_WidgetBoolInputSigDelegate callback);

        /// <summary>
        /// Indicator.Cam[3].Selected.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void IndicatorCam_3_Selected_Visibility_fb(bool digital);

        /// <summary>
        /// Btn.AutoTrackingTgl.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void BtnAutoTrackingTgl_Selected(Cam_03_Control_WidgetBoolInputSigDelegate callback);

        /// <summary>
        /// Btn.AutoTrackingTgl.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void BtnAutoTrackingTgl_Selected(bool digital);

        /// <summary>
        /// Video.Cam[1].Snapshot Refresh Rate Feedback
        /// </summary>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        void VideoCam_1__SnapshotRefreshRate(Cam_03_Control_WidgetUShortInputSigDelegate callback);

        /// <summary>
        /// Video.Cam[1].Snapshot Refresh Rate Feedback
        /// </summary>
        /// <param name="callback">The ushort analog to update the panel.</param>
        void VideoCam_1__SnapshotRefreshRate(ushort analog);

        /// <summary>
        /// Video.Cam[1].Snapshot Refresh Rate Feedback
        /// </summary>
        /// <param name="callback">The short analog to update the panel.</param>
        void VideoCam_1__SnapshotRefreshRate(short analog);

        /// <summary>
        /// Video.Cam[2].Snapshot Refresh Rate Feedback
        /// </summary>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        void VideoCam_2__SnapshotRefreshRate(Cam_03_Control_WidgetUShortInputSigDelegate callback);

        /// <summary>
        /// Video.Cam[2].Snapshot Refresh Rate Feedback
        /// </summary>
        /// <param name="callback">The ushort analog to update the panel.</param>
        void VideoCam_2__SnapshotRefreshRate(ushort analog);

        /// <summary>
        /// Video.Cam[2].Snapshot Refresh Rate Feedback
        /// </summary>
        /// <param name="callback">The short analog to update the panel.</param>
        void VideoCam_2__SnapshotRefreshRate(short analog);

        /// <summary>
        /// Video.Cam[3].Snapshot Refresh Rate Feedback
        /// </summary>
        /// <param name="callback">The ushort delegate to update the panel.</param>
        void VideoCam_3__SnapshotRefreshRate(Cam_03_Control_WidgetUShortInputSigDelegate callback);

        /// <summary>
        /// Video.Cam[3].Snapshot Refresh Rate Feedback
        /// </summary>
        /// <param name="callback">The ushort analog to update the panel.</param>
        void VideoCam_3__SnapshotRefreshRate(ushort analog);

        /// <summary>
        /// Video.Cam[3].Snapshot Refresh Rate Feedback
        /// </summary>
        /// <param name="callback">The short analog to update the panel.</param>
        void VideoCam_3__SnapshotRefreshRate(short analog);

        /// <summary>
        /// Video.Cam[1].Snapshot URL Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void VideoCam_1__SnapshotURL_fb(Cam_03_Control_WidgetStringInputSigDelegate callback);

        /// <summary>
        /// Video.Cam[1].Snapshot URL Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void VideoCam_1__SnapshotURL_fb(string serial);

        /// <summary>
        /// Video.Cam[2].Snapshot URL Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void VideoCam_2__SnapshotURL_fb(Cam_03_Control_WidgetStringInputSigDelegate callback);

        /// <summary>
        /// Video.Cam[2].Snapshot URL Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void VideoCam_2__SnapshotURL_fb(string serial);

        /// <summary>
        /// Video.Cam[3].Snapshot URL Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void VideoCam_3__SnapshotURL_fb(Cam_03_Control_WidgetStringInputSigDelegate callback);

        /// <summary>
        /// Video.Cam[3].Snapshot URL Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void VideoCam_3__SnapshotURL_fb(string serial);
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="cam_03_control_widget">The <see cref="ICam_03_Control_Widget"/> on which to apply the feedback.</param>
    public delegate void Cam_03_Control_WidgetBoolInputSigDelegate(BoolInputSig boolInputSig, ICam_03_Control_Widget cam_03_control_widget);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="uShortInputSig">The <see cref="UShortInputSig"/> joinInfo data.</param>
    /// <param name="cam_03_control_widget">The <see cref="ICam_03_Control_Widget"/> on which to apply the feedback.</param>
    public delegate void Cam_03_Control_WidgetUShortInputSigDelegate(UShortInputSig uShortInputSig, ICam_03_Control_Widget cam_03_control_widget);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="cam_03_control_widget">The <see cref="ICam_03_Control_Widget"/> on which to apply the feedback.</param>
    public delegate void Cam_03_Control_WidgetStringInputSigDelegate(StringInputSig stringInputSig, ICam_03_Control_Widget cam_03_control_widget);

    /// <summary>
    /// Cam_03_Control_Widget
    /// </summary>
    internal partial class Cam_03_Control_Widget : ICam_03_Control_Widget, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_03_Control_Widget.BtnAutoTrackingTgl.Press
                /// Btn.AutoTrackingTgl.Press
                /// </summary>
                public const uint BtnAutoTrackingTgl_PressEvent = 2;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_03_Control_Widget.BtnDPAD_Bottom.Press
                /// Btn.DPAD_Bottom.Press
                /// </summary>
                public const uint BtnDPAD_Bottom_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_03_Control_Widget.BtnDPAD_Center.Press
                /// Btn.DPAD_Center.Press
                /// </summary>
                public const uint BtnDPAD_Center_PressEvent = 4;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_03_Control_Widget.BtnDPAD_Left.Press
                /// Btn.DPAD_Left.Press
                /// </summary>
                public const uint BtnDPAD_Left_PressEvent = 5;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_03_Control_Widget.BtnDPAD_Right.Press
                /// Btn.DPAD_Right.Press
                /// </summary>
                public const uint BtnDPAD_Right_PressEvent = 6;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_03_Control_Widget.BtnDPAD_Top.Press
                /// Btn.DPAD_Top.Press
                /// </summary>
                public const uint BtnDPAD_Top_PressEvent = 7;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_03_Control_Widget.BtnZoomIn.Press
                /// Btn.ZoomIn.Press
                /// </summary>
                public const uint BtnZoomIn_PressEvent = 8;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_03_Control_Widget.BtnZoomOut.Press
                /// Btn.ZoomOut.Press
                /// </summary>
                public const uint BtnZoomOut_PressEvent = 9;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_03_Control_Widget.VideoCam[1].Pressed
                /// Video.Cam[1].Pressed
                /// </summary>
                public const uint VideoCam_1__PressedEvent = 10;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_03_Control_Widget.VideoCam[2].Pressed
                /// Video.Cam[2].Pressed
                /// </summary>
                public const uint VideoCam_2__PressedEvent = 11;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: Cam_03_Control_Widget.VideoCam[3].Pressed
                /// Video.Cam[3].Pressed
                /// </summary>
                public const uint VideoCam_3__PressedEvent = 12;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Cam_03_Control_Widget.IndicatorCam[1]Selected.Visibility_fb
                /// Indicator.Cam[1].Selected.Visibility
                /// </summary>
                public const uint IndicatorCam_1_Selected_Visibility_fbState = 1;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Cam_03_Control_Widget.IndicatorCam[2]Selected.Visibility_fb
                /// Indicator.Cam[2].Selected.Visibility
                /// </summary>
                public const uint IndicatorCam_2_Selected_Visibility_fbState = 2;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Cam_03_Control_Widget.IndicatorCam[3]Selected.Visibility_fb
                /// Indicator.Cam[3].Selected.Visibility
                /// </summary>
                public const uint IndicatorCam_3_Selected_Visibility_fbState = 3;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: Cam_03_Control_Widget.BtnAutoTrackingTgl.Selected
                /// Btn.AutoTrackingTgl.Selected
                /// </summary>
                public const uint BtnAutoTrackingTgl_SelectedState = 5;

            }
            /// <summary>
            /// Analog signals.
            /// </summary>
            internal static class Numerics
            {

                /// <summary>
                /// Input or Feedback analog joinInfo from Control System to panel: Cam_03_Control_Widget.VideoCam[1].SnapshotRefreshRate
                /// Video.Cam[1].Snapshot Refresh Rate
                /// </summary>
                public const uint VideoCam_1__SnapshotRefreshRateState = 12;

                /// <summary>
                /// Input or Feedback analog joinInfo from Control System to panel: Cam_03_Control_Widget.VideoCam[2].SnapshotRefreshRate
                /// Video.Cam[2].Snapshot Refresh Rate
                /// </summary>
                public const uint VideoCam_2__SnapshotRefreshRateState = 13;

                /// <summary>
                /// Input or Feedback analog joinInfo from Control System to panel: Cam_03_Control_Widget.VideoCam[3].SnapshotRefreshRate
                /// Video.Cam[3].Snapshot Refresh Rate
                /// </summary>
                public const uint VideoCam_3__SnapshotRefreshRateState = 14;

            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {

                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Cam_03_Control_Widget.VideoCam[1].SnapshotURL_fb
                /// Video.Cam[1].Snapshot URL
                /// </summary>
                public const uint VideoCam_1__SnapshotURL_fbState = 11;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Cam_03_Control_Widget.VideoCam[2].SnapshotURL_fb
                /// Video.Cam[2].Snapshot URL
                /// </summary>
                public const uint VideoCam_2__SnapshotURL_fbState = 12;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: Cam_03_Control_Widget.VideoCam[3].SnapshotURL_fb
                /// Video.Cam[3].Snapshot URL
                /// </summary>
                public const uint VideoCam_3__SnapshotURL_fbState = 13;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="Cam_03_Control_Widget"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal Cam_03_Control_Widget(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Cam_03_Control_Widget"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal Cam_03_Control_Widget(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Cam_03_Control_Widget"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 

            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnAutoTrackingTgl_PressEvent, onBtnAutoTrackingTgl_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnDPAD_Bottom_PressEvent, onBtnDPAD_Bottom_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnDPAD_Center_PressEvent, onBtnDPAD_Center_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnDPAD_Left_PressEvent, onBtnDPAD_Left_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnDPAD_Right_PressEvent, onBtnDPAD_Right_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnDPAD_Top_PressEvent, onBtnDPAD_Top_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnZoomIn_PressEvent, onBtnZoomIn_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.BtnZoomOut_PressEvent, onBtnZoomOut_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.VideoCam_1__PressedEvent, onVideoCam_1__Pressed);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.VideoCam_2__PressedEvent, onVideoCam_2__Pressed);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.VideoCam_3__PressedEvent, onVideoCam_3__Pressed);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnAutoTrackingTgl_PressEvent;
        private void onBtnAutoTrackingTgl_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnAutoTrackingTgl_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnDPAD_Bottom_PressEvent;
        private void onBtnDPAD_Bottom_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnDPAD_Bottom_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnDPAD_Center_PressEvent;
        private void onBtnDPAD_Center_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnDPAD_Center_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnDPAD_Left_PressEvent;
        private void onBtnDPAD_Left_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnDPAD_Left_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnDPAD_Right_PressEvent;
        private void onBtnDPAD_Right_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnDPAD_Right_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnDPAD_Top_PressEvent;
        private void onBtnDPAD_Top_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnDPAD_Top_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnZoomIn_PressEvent;
        private void onBtnZoomIn_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnZoomIn_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> BtnZoomOut_PressEvent;
        private void onBtnZoomOut_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = BtnZoomOut_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> VideoCam_1__PressedEvent;
        private void onVideoCam_1__Pressed(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = VideoCam_1__PressedEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> VideoCam_2__PressedEvent;
        private void onVideoCam_2__Pressed(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = VideoCam_2__PressedEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> VideoCam_3__PressedEvent;
        private void onVideoCam_3__Pressed(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = VideoCam_3__PressedEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void BtnAutoTrackingTgl_Selected(Cam_03_Control_WidgetBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.BtnAutoTrackingTgl_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void BtnAutoTrackingTgl_Selected(bool digital)
        {
            BtnAutoTrackingTgl_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void IndicatorCam_1_Selected_Visibility_fb(Cam_03_Control_WidgetBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.IndicatorCam_1_Selected_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void IndicatorCam_1_Selected_Visibility_fb(bool digital)
        {
            IndicatorCam_1_Selected_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void IndicatorCam_2_Selected_Visibility_fb(Cam_03_Control_WidgetBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.IndicatorCam_2_Selected_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void IndicatorCam_2_Selected_Visibility_fb(bool digital)
        {
            IndicatorCam_2_Selected_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void IndicatorCam_3_Selected_Visibility_fb(Cam_03_Control_WidgetBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.IndicatorCam_3_Selected_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void IndicatorCam_3_Selected_Visibility_fb(bool digital)
        {
            IndicatorCam_3_Selected_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }

        /// <inheritdoc/>
        public void VideoCam_1__SnapshotRefreshRate(Cam_03_Control_WidgetUShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.VideoCam_1__SnapshotRefreshRateState], this);
            }
        }

        /// <inheritdoc/>
        public void VideoCam_1__SnapshotRefreshRate(ushort analog)
        {
            VideoCam_1__SnapshotRefreshRate((sig, component) => sig.UShortValue = analog);
        }

        /// <inheritdoc/>
        public void VideoCam_1__SnapshotRefreshRate(short analog)
        {
            VideoCam_1__SnapshotRefreshRate((sig, component) => sig.ShortValue = analog);
        }
        /// <inheritdoc/>
        public void VideoCam_2__SnapshotRefreshRate(Cam_03_Control_WidgetUShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.VideoCam_2__SnapshotRefreshRateState], this);
            }
        }

        /// <inheritdoc/>
        public void VideoCam_2__SnapshotRefreshRate(ushort analog)
        {
            VideoCam_2__SnapshotRefreshRate((sig, component) => sig.UShortValue = analog);
        }

        /// <inheritdoc/>
        public void VideoCam_2__SnapshotRefreshRate(short analog)
        {
            VideoCam_2__SnapshotRefreshRate((sig, component) => sig.ShortValue = analog);
        }
        /// <inheritdoc/>
        public void VideoCam_3__SnapshotRefreshRate(Cam_03_Control_WidgetUShortInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].UShortInput[Joins.Numerics.VideoCam_3__SnapshotRefreshRateState], this);
            }
        }

        /// <inheritdoc/>
        public void VideoCam_3__SnapshotRefreshRate(ushort analog)
        {
            VideoCam_3__SnapshotRefreshRate((sig, component) => sig.UShortValue = analog);
        }

        /// <inheritdoc/>
        public void VideoCam_3__SnapshotRefreshRate(short analog)
        {
            VideoCam_3__SnapshotRefreshRate((sig, component) => sig.ShortValue = analog);
        }

        /// <inheritdoc/>
        public void VideoCam_1__SnapshotURL_fb(Cam_03_Control_WidgetStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.VideoCam_1__SnapshotURL_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void VideoCam_1__SnapshotURL_fb(string serial)
        {
            VideoCam_1__SnapshotURL_fb((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void VideoCam_2__SnapshotURL_fb(Cam_03_Control_WidgetStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.VideoCam_2__SnapshotURL_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void VideoCam_2__SnapshotURL_fb(string serial)
        {
            VideoCam_2__SnapshotURL_fb((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void VideoCam_3__SnapshotURL_fb(Cam_03_Control_WidgetStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.VideoCam_3__SnapshotURL_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void VideoCam_3__SnapshotURL_fb(string serial)
        {
            VideoCam_3__SnapshotURL_fb((sig, component) => sig.StringValue = serial);
        }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "Cam_03_Control_Widget", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            BtnAutoTrackingTgl_PressEvent = null;
            BtnDPAD_Bottom_PressEvent = null;
            BtnDPAD_Center_PressEvent = null;
            BtnDPAD_Left_PressEvent = null;
            BtnDPAD_Right_PressEvent = null;
            BtnDPAD_Top_PressEvent = null;
            BtnZoomIn_PressEvent = null;
            BtnZoomOut_PressEvent = null;
            VideoCam_1__PressedEvent = null;
            VideoCam_2__PressedEvent = null;
            VideoCam_3__PressedEvent = null;
        }

        #endregion
    }
}
